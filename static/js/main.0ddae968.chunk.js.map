{"version":3,"sources":["data/leetcode/Array/189-rotate-array.js","data/leetcode/Array/26-remove-duplicates-from-sorted-array.js","data/leetcode/Array/283-remove-zero.js","data/leetcode/Array/34-find-first-last-element-array.js","data/leetcode/BackTracking/78-subsets.js","data/leetcode/BinarySearch/704-binarySearch.js","data/leetcode/BinarySearchTree/100-same-tree.js","data/leetcode/BinarySearchTree/101-symmetric-tree.js","data/leetcode/BinarySearchTree/102-binary-tree-level-order-traversal.js","data/leetcode/BinarySearchTree/103-binary-tree-zigzag-level-order-traversal.js","data/leetcode/BinarySearchTree/104-max-depth-of-binary-tree.js","data/leetcode/BinarySearchTree/105-preorder-to-inorder-traversal.js","data/leetcode/BinarySearchTree/107-binary-tree-level-order-traversal.js","data/leetcode/BinarySearchTree/108-convert-array-bst.js","data/leetcode/BinarySearchTree/111-minimum-depth-of-binary-tree.js","data/leetcode/BinarySearchTree/112-path-sum.js","data/leetcode/BinarySearchTree/144-binary-tree-preorder-traversal.js","data/leetcode/BinarySearchTree/145-binary-tree-postorder-traversal.js","data/leetcode/BinarySearchTree/199-binary-tree-right-side-view.js","data/leetcode/BinarySearchTree/200-number-island.js","data/leetcode/BinarySearchTree/226-invert-binary-tree.js","data/leetcode/BinarySearchTree/230-kth-element.js","data/leetcode/BinarySearchTree/257-binary-tree-paths.js","data/leetcode/BinarySearchTree/513-find-bottom-left-tree-value.js","data/leetcode/BinarySearchTree/515-largest-value-tree-row.js","data/leetcode/BinarySearchTree/655-PrintBST.js","data/leetcode/BinarySearchTree/700-searchBST.js","data/leetcode/BinarySearchTree/94-binary-tree-inorder-traversal.js","data/leetcode/BinarySearchTree/98-validate-binary-search-tree.js","data/leetcode/BreadthFirstSearch/127-word-ladder.js","data/leetcode/Combination/131-palindrome-partition.js","data/leetcode/Combination/17-phone-letter-combine.js","data/leetcode/Combination/39-combination-sum.js","data/leetcode/Combination/40-combination-sum-ii.js","data/leetcode/Combination/77-combinations.js","data/leetcode/DynamicProgramming/322-coin-change.js","data/leetcode/HashTable/1-two-sum.js","data/leetcode/HashTable/217-contains-duplicate.js","data/leetcode/HashTable/766-toeplitz-matrix.js","data/leetcode/HashTable/771-jewels-and-stones.js","data/leetcode/HashTable/804-morse-code.js","data/leetcode/LinkedList/116-pointers-next-right-node.js","data/leetcode/LinkedList/141-linked-list-cycle.js","data/leetcode/LinkedList/148-sorted-linked-list.js","data/leetcode/LinkedList/19-remove-nth-node-from-end-of-list.js","data/leetcode/LinkedList/2-add-two-linked.js","data/leetcode/LinkedList/203-remove-linked-list-elements.js","data/leetcode/LinkedList/206-reverse-linked-list.js","data/leetcode/LinkedList/21-merge-two-sorted-lists.js","data/leetcode/LinkedList/234-palindrome-linked-list.js","data/leetcode/LinkedList/237-delete-linked-list.js","data/leetcode/LinkedList/83-remove-duplicates-from-sorted-list.js","data/leetcode/LinkedList/876-middle-of-the-linked-list.js","data/leetcode/Permutations/46-permutations.js","data/leetcode/Permutations/93-restore-ip-addresses.js","data/leetcode/TwoPointer/167-two-sum-II.js","data/leetcode/_misc/122-best-time-to-buy-and-sell-stock.js","data/leetcode/_misc/125-valid-palindrome.js","data/leetcode/_misc/344-reverse-string.js","data/leetcode/_misc/7-revese-integer.js","../ /^/.//.*$","data/index.js","components/header/index.js","components/home/index.js","components/resume/index.js","components/leetcode/filter.js","components/leetcode/styles/treeTheme.js","components/leetcode/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","map","./Array/189-rotate-array","./Array/189-rotate-array.js","./Array/26-remove-duplicates-from-sorted-array","./Array/26-remove-duplicates-from-sorted-array.js","./Array/283-remove-zero","./Array/283-remove-zero.js","./Array/34-find-first-last-element-array","./Array/34-find-first-last-element-array.js","./BackTracking/78-subsets","./BackTracking/78-subsets.js","./BinarySearch/704-binarySearch","./BinarySearch/704-binarySearch.js","./BinarySearchTree/100-same-tree","./BinarySearchTree/100-same-tree.js","./BinarySearchTree/101-symmetric-tree","./BinarySearchTree/101-symmetric-tree.js","./BinarySearchTree/102-binary-tree-level-order-traversal","./BinarySearchTree/102-binary-tree-level-order-traversal.js","./BinarySearchTree/103-binary-tree-zigzag-level-order-traversal","./BinarySearchTree/103-binary-tree-zigzag-level-order-traversal.js","./BinarySearchTree/104-max-depth-of-binary-tree","./BinarySearchTree/104-max-depth-of-binary-tree.js","./BinarySearchTree/105-preorder-to-inorder-traversal","./BinarySearchTree/105-preorder-to-inorder-traversal.js","./BinarySearchTree/107-binary-tree-level-order-traversal","./BinarySearchTree/107-binary-tree-level-order-traversal.js","./BinarySearchTree/108-convert-array-bst","./BinarySearchTree/108-convert-array-bst.js","./BinarySearchTree/111-minimum-depth-of-binary-tree","./BinarySearchTree/111-minimum-depth-of-binary-tree.js","./BinarySearchTree/112-path-sum","./BinarySearchTree/112-path-sum.js","./BinarySearchTree/144-binary-tree-preorder-traversal","./BinarySearchTree/144-binary-tree-preorder-traversal.js","./BinarySearchTree/145-binary-tree-postorder-traversal","./BinarySearchTree/145-binary-tree-postorder-traversal.js","./BinarySearchTree/199-binary-tree-right-side-view","./BinarySearchTree/199-binary-tree-right-side-view.js","./BinarySearchTree/200-number-island","./BinarySearchTree/200-number-island.js","./BinarySearchTree/226-invert-binary-tree","./BinarySearchTree/226-invert-binary-tree.js","./BinarySearchTree/230-kth-element","./BinarySearchTree/230-kth-element.js","./BinarySearchTree/257-binary-tree-paths","./BinarySearchTree/257-binary-tree-paths.js","./BinarySearchTree/513-find-bottom-left-tree-value","./BinarySearchTree/513-find-bottom-left-tree-value.js","./BinarySearchTree/515-largest-value-tree-row","./BinarySearchTree/515-largest-value-tree-row.js","./BinarySearchTree/655-PrintBST","./BinarySearchTree/655-PrintBST.js","./BinarySearchTree/700-searchBST","./BinarySearchTree/700-searchBST.js","./BinarySearchTree/94-binary-tree-inorder-traversal","./BinarySearchTree/94-binary-tree-inorder-traversal.js","./BinarySearchTree/98-validate-binary-search-tree","./BinarySearchTree/98-validate-binary-search-tree.js","./BreadthFirstSearch/127-word-ladder","./BreadthFirstSearch/127-word-ladder.js","./Combination/131-palindrome-partition","./Combination/131-palindrome-partition.js","./Combination/17-phone-letter-combine","./Combination/17-phone-letter-combine.js","./Combination/39-combination-sum","./Combination/39-combination-sum.js","./Combination/40-combination-sum-ii","./Combination/40-combination-sum-ii.js","./Combination/77-combinations","./Combination/77-combinations.js","./DynamicProgramming/322-coin-change","./DynamicProgramming/322-coin-change.js","./HashTable/1-two-sum","./HashTable/1-two-sum.js","./HashTable/217-contains-duplicate","./HashTable/217-contains-duplicate.js","./HashTable/766-toeplitz-matrix","./HashTable/766-toeplitz-matrix.js","./HashTable/771-jewels-and-stones","./HashTable/771-jewels-and-stones.js","./HashTable/804-morse-code","./HashTable/804-morse-code.js","./LinkedList/116-pointers-next-right-node","./LinkedList/116-pointers-next-right-node.js","./LinkedList/141-linked-list-cycle","./LinkedList/141-linked-list-cycle.js","./LinkedList/148-sorted-linked-list","./LinkedList/148-sorted-linked-list.js","./LinkedList/19-remove-nth-node-from-end-of-list","./LinkedList/19-remove-nth-node-from-end-of-list.js","./LinkedList/2-add-two-linked","./LinkedList/2-add-two-linked.js","./LinkedList/203-remove-linked-list-elements","./LinkedList/203-remove-linked-list-elements.js","./LinkedList/206-reverse-linked-list","./LinkedList/206-reverse-linked-list.js","./LinkedList/21-merge-two-sorted-lists","./LinkedList/21-merge-two-sorted-lists.js","./LinkedList/234-palindrome-linked-list","./LinkedList/234-palindrome-linked-list.js","./LinkedList/237-delete-linked-list","./LinkedList/237-delete-linked-list.js","./LinkedList/83-remove-duplicates-from-sorted-list","./LinkedList/83-remove-duplicates-from-sorted-list.js","./LinkedList/876-middle-of-the-linked-list","./LinkedList/876-middle-of-the-linked-list.js","./Permutations/46-permutations","./Permutations/46-permutations.js","./Permutations/93-restore-ip-addresses","./Permutations/93-restore-ip-addresses.js","./TwoPointer/167-two-sum-II","./TwoPointer/167-two-sum-II.js","./_misc/122-best-time-to-buy-and-sell-stock","./_misc/122-best-time-to-buy-and-sell-stock.js","./_misc/125-valid-palindrome","./_misc/125-valid-palindrome.js","./_misc/344-reverse-string","./_misc/344-reverse-string.js","./_misc/7-revese-integer","./_misc/7-revese-integer.js","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","Header","react_default","a","createElement","className","Link","to","Home","Resume","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","React","Component","data","name","toggled","children","type","i","length","j","require","concat","console","log","defaultMatcher","filterText","node","indexOf","findNode","filter","matcher","find","child","treeTheme","tree","base","listStyle","backgroundColor","margin","padding","color","fontFamily","fontSize","position","link","cursor","display","activeLink","background","toggle","verticalAlign","marginLeft","height","width","wrapper","top","left","arrow","fill","strokeWidth","header","connector","borderLeft","borderBottom","title","lineHeight","subtree","paddingLeft","loading","LeetCode","props","content","onToggle","bind","assertThisInitialized","setState","Prism","highlightAll","active","target","value","trim","filtered","filterTree","arguments","undefined","assign","filters","expandFilteredNodes","childrenWithMatches","shouldExpand","onKeyUp","onFilterMouseUp","placeholder","react_treebeard","style","treeStyle","App","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","HashRouter","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ddae968.chunk.js","sourcesContent":["module.exports = \"// Given an array, rotate the array to the right by k steps, where k is non-negative.\\n\\n// Example 1:\\n\\n// Input: [1,2,3,4,5,6,7] and k = 3\\n// Output: [5,6,7,1,2,3,4]\\n// Explanation:\\n// rotate 1 steps to the right: [7,1,2,3,4,5,6]\\n// rotate 2 steps to the right: [6,7,1,2,3,4,5]\\n// rotate 3 steps to the right: [5,6,7,1,2,3,4]\\n\\nconst rotate = (nums, k) => {\\n    for (let i = 0; i < k; i++) {\\n        let temp = nums.pop();\\n        nums.unshift(temp);\\n    }\\n};\\nconsole.log(rotate([0], 1));\"","module.exports = \"// Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.\\n\\n// Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\\n\\n// Example 1:\\n\\n// Given nums = [1,1,2],\\n\\n// Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.\\n\\n// It doesn't matter what you leave beyond the returned length.\\n// Example 2:\\n\\n// Given nums = [0,0,1,1,1,2,2,3,3,4],\\n\\n// Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.\\n\\n// It doesn't matter what values are set beyond the returned length.\\n\\n/**\\n * @param {number[]} nums\\n * @return {number} the length or nums;\\n */\\n\\nvar removeDuplicates = function(nums) {\\n    if (!nums.length) return 0;\\n    let count = 1;\\n    for (let i=1; i<nums.length; i++) {\\n        if (nums[i] !== nums[i-1]) {\\n            nums[count] = nums[i];\\n            count++;\\n        }\\n    }\\n    return count;\\n};\\n\\nconsole.log(removeDuplicates(null));\"","module.exports = \"// Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.\\n\\n// Example:\\n\\n// Input: [0,1,0,3,12]\\n// Output: [1,3,12,0,0]\\n// Note:\\n\\n// You must do this in-place without making a copy of the array.\\n// Minimize the total number of operations.\\n\\nvar moveZeroes = function(nums) {  \\n    for (let i = nums.length; i > 0; i--) {\\n        if(nums[i] === 0) {\\n            let temp = nums.splice(i, 1);\\n            nums.push(temp);\\n        }\\n    }\\n}\\nconsole.log(moveZeroes([0]));\"","module.exports = \"// Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\\n\\n// Your algorithm's runtime complexity must be in the order of O(log n).\\n\\n// If the target is not found in the array, return [-1, -1].\\n\\n// Example 1:\\n\\n// Input: nums = [5,7,7,8,8,10], target = 8\\n// Output: [3,4]\\n// Example 2:\\n\\n// Input: nums = [5,7,7,8,8,10], target = 6\\n// Output: [-1,-1]\\n\\nvar searchRange = function(nums, target) {\\n    if (nums.length === 0) return [-1,-1];\\n    let first = 0;\\n    let last = nums.length - 1;\\n    let startIndex = -1;\\n    let endIndex = -1;\\n    for (let i = 0; i < nums.length; i++) {\\n         if (nums[first] === target) {\\n             startIndex = first;\\n         } else {\\n             first++;\\n         }\\n         if (nums[last] === target) {\\n             endIndex = last;\\n         } else {\\n             last--;\\n         }\\n    }\\n    return [startIndex, endIndex];\\n }\\n console.log(searchRange([],0));\"","module.exports = \"// Given a set of distinct integers, nums, return all possible subsets (the power set).\\n\\n// Note: The solution set must not contain duplicate subsets.\\n\\n// Example:\\n\\n// Input: nums = [1,2,3]\\n// Output:\\n// [\\n//   [3],\\n//   [1],\\n//   [2],\\n//   [1,2,3],\\n//   [1,3],\\n//   [2,3],\\n//   [1,2],\\n//   []\\n// ]\\n\\nconst dfs = (nums, startIndex, list, result) => {\\n    // sanity check and return the data to stop the recursion\\n    if(startIndex === nums.length) { result.push(list.slice()); return; }\\n\\n    // core logic\\n    \\n    dfs(nums, startIndex + 1, list, result);\\n    list.push(nums[startIndex]);\\n    dfs(nums, startIndex + 1, list, result);\\n    list.pop();\\n}\\n\\nvar subsets = function(nums) {\\n    // sanity check\\n    if (nums === null || nums.length === 0) return [];\\n\\n    let result = [];\\n\\n    // depth first search\\n    dfs(nums, 0, [], result);\\n\\n    // return subset;\\n    return result;\\n};\\n\\nconsole.log(subsets([1,2,3]));\"","module.exports = \"// Given a sorted (in ascending order) integer array nums of n elements and a target value, write a function to search target in nums. If target exists, then return its index, otherwise return -1.\\n\\n// Example 1:\\n\\n// Input: nums = [-1,0,3,5,9,12], target = 9\\n// Output: 4\\n// Explanation: 9 exists in nums and its index is 4\\n\\nconst search = (nums, target) => {\\n    let start = 0, end = nums.length - 1, middle;\\n    while (start < end) {\\n        middle = Math.floor((start+end) / 2);\\n        if (nums[middle] === target) { return middle; }\\n        if (nums[middle] < target) {\\n            start = middle + 1;\\n        } else { \\n            end = middle - 1;\\n        }\\n    }\\n    return -1;\\n}\\nconsole.log(search([1,2,3,4,5,6], 9));\"","module.exports = \"// Given two binary trees, write a function to check if they are the same or not.\\n\\n// Two binary trees are considered the same if they are structurally identical and the nodes have the same value.\\n\\n// Example 1:\\n\\n// Input:     1         1\\n//           / \\\\       / \\\\\\n//          2   3     2   3\\n\\n//         [1,2,3],   [1,2,3]\\n\\n// Output: true\\n// Example 2:\\n\\n// Input:     1         1\\n//           /           \\\\\\n//          2             2\\n\\n//         [1,2],     [1,null,2]\\n\\n// Output: false\\n// Example 3:\\n\\n// Input:     1         1\\n//           / \\\\       / \\\\\\n//          2   1     1   2\\n\\n//         [1,2,1],   [1,1,2]\\n\\n// Output: false\\n\\nconst isSameTree = (tree1, tree2) => {\\n    if (tree1 === null || tree2 === null) { return true; }\\n    if ((tree1 !== null && tree2 === null) && (tree1 === null && tree2 !== null)) { return false; }\\n    if (tree1.val !== tree2.val) { return false; }\\n    return isSameTree(tree1.left, tree2.left) && isSameTree(tree1.right, tree2.right);\\n}\"","module.exports = \"// mirror of itself (ie, symmetric around its center).\\n\\n// For example, this binary tree [1,2,2,3,4,4,3] is symmetric:\\n\\n//     1\\n//    / \\\\\\n//   2   2\\n//  / \\\\ / \\\\\\n// 3  4 4  3\\n// But the following [1,2,2,null,3,null,3] is not:\\n//     1\\n//    / \\\\\\n//   2   2\\n//    \\\\   \\\\\\n//    3    3\\n\\nconst reverseHelper = head => {\\n    if (head === null) return head;\\n    let temp = head.left;\\n    head.left = reverseHelper(head.right);\\n    head.right = reverseHelper(temp);\\n    return head;\\n}\\nconst sameTree = (node1, node2) => {\\n    if (node1 === null && node2 === null) {\\n        return true;\\n    }\\n    if ((node1 !== null && node2 === null) || (node1 === null && node2 !== null)) {\\n        return false;\\n    }\\n    if (node1.val !== node2.val) {\\n        return false;\\n    }\\n    return sameTree(node1.left, node2.left)  && sameTree(node1.right, node2.right);\\n}\\n\\nvar isSymmetric = function(root) {  \\n    if (root === null) return true;\\n    let reverseTree = reverseHelper(root.left);\\n    return sameTree(reverseTree, root.right);\\n}\\n\\nconsole.log(isSymmetric(null));\"","module.exports = \"// Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\\n\\n// For example:\\n// Given binary tree [3,9,20,null,null,15,7],\\n//     3\\n//    / \\\\\\n//   9  20\\n//     /  \\\\\\n//    15   7\\n// return its level order traversal as:\\n// [\\n//   [3],\\n//   [9,20],\\n//   [15,7]\\n// ]\\n\\nconst levelOrder = root => {\\n    if (root === null) return [];\\n    let result = [];\\n    let queue = [root];\\n    while (queue.length > 0) {\\n        let size = queue.length;\\n        let current = [];\\n        for (let i = 0; i < size; i++) {\\n            let head = queue.shift();\\n            current.push(head.val);\\n            if (head.left !== null) { queue.push(head.left); }\\n            if (head.right !== null) { queue.push(head.right)}\\n        }\\n        result.push(current);\\n    }\\n    return result;\\n}\\n\\nconsole.log(levelOrder(null));\"","module.exports = \"// Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).\\n\\n// For example:\\n// Given binary tree [3,9,20,null,null,15,7],\\n//     3\\n//    / \\\\\\n//   9  20\\n//     /  \\\\\\n//    15   7\\n// return its zigzag level order traversal as:\\n// [\\n//   [3],\\n//   [20,9],\\n//   [15,7]\\n// ]\\n\\nvar zigzagLevelOrder = function(root) {\\n    if (root === null) return [];\\n    let result = [];\\n    let queue = [root];\\n    let normal = true;\\n    while (queue.length > 0) {\\n        let size = queue.length;\\n        let current = [];\\n        for (let i = 0; i < size; i++) {\\n            let head = queue.shift();\\n            normal ? current.push(head.val) : current.unshift(head.val);\\n            if (head.left !== null) { queue.push(head.left); }\\n            if (head.right !== null) { queue.push(head.right); }\\n        }\\n        result.push(current);\\n        normal = !normal;\\n    }\\n    return result;\\n}\\nconsole.log(zigzagLevelOrder(null));\"","module.exports = \"// Given a binary tree, find its maximum depth.\\n\\n// The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\\n\\n// Note: A leaf is a node with no children.\\n\\n// Example:\\n\\n// Given binary tree [3,9,20,null,null,15,7],\\n\\n//     3\\n//    / \\\\\\n//   9  20\\n//     /  \\\\\\n//    15   7\\n// return its depth = 3.\\n\\nconst maxDepth = root => {\\n    let max = 0;\\n    const findMaxDepth = (node, currDepth) => {\\n        if (node === null) return currDepth;\\n        if (currDepth > max) { max = currDepth; }\\n        if (node.left !== null) { findMaxDepth(node.left, currDepth + 1); }\\n        if (node.right !== null) { findMaxDepth(node.right, currDepth + 1); }\\n    }\\n    findMaxDepth(root, 1);\\n    return max;\\n}\\n\\nvar maxDepth2 = function(root) {\\n    if (root === null) return 0;\\n    return Math.max(maxDepth2(root.left), maxDepth2(root.right)) + 1;\\n};\\n\\nconsole.log(maxDepth(null));\"","module.exports = \"// Given preorder and inorder traversal of a tree, construct the binary tree.\\n\\n// Note:\\n// You may assume that duplicates do not exist in the tree.\\n\\n// For example, given\\n\\n// preorder = [3,9,20,15,7]\\n// inorder = [9,3,15,20,7]\\n// Return the following binary tree:\\n\\n//     3\\n//    / \\\\\\n//   9  20\\n//     /  \\\\\\n//    15   7\\nconst TreeNode = (val) => {\\n    this.val = val;\\n    this.left = null;\\n    this.right = null;\\n}\\nconst p2iHelper = (preorder, pStart, pEnd, inorder, iStart, iEnd) => {\\n    if (iStart > iEnd) return null;\\n    let value = preorder[pStart];\\n    let root = new TreeNode(value);\\n    let position = inorder.indexOf(value); // found out where is the value index in the iorder arrary\\n    root.left = p2iHelper(preorder, pStart + 1, pStart + position - iStart, inorder, iStart, position - 1);\\n    root.right =  p2iHelper(preorder, position - iEnd + pEnd + 1, pEnd, inorder, position + 1 , iEnd);\\n    return root;\\n}\\nconst buildTree = (preorder, inorder) => {\\n    // sanity check\\n    if (preorder.length !== inorder.length) return null;\\n    \\n    //base logic\\n    return p2iHelper(preorder, 0, preorder.length - 1, inorder, 0, inorder.length - 1);\\n}\\n\\nconsole.log(buildTree(null,null));\"","module.exports = \"// Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).\\n\\n// For example:\\n// Given binary tree [3,9,20,null,null,15,7],\\n//     3\\n//    / \\\\\\n//   9  20\\n//     /  \\\\\\n//    15   7\\n// return its bottom-up level order traversal as:\\n// [\\n//   [15,7],\\n//   [9,20],\\n//   [3]\\n// ]\\n\\nconst levelOrderBottom = root => {\\n    if (root === null) return [];\\n    let result = [];\\n    let queue = [root];\\n    while(queue.length > 0) {\\n        let size = queue.length;\\n        let current = [];\\n        for (let i = 0; i < size; i++) {\\n            let head = queue.shift();\\n            current.push(head.val);\\n            if (head.left !== null) { queue.push(head.left); }\\n            if (head.right !== null) { queue.push(head.right); }\\n        }\\n        result.unshift(current);\\n    }\\n    return result;\\n}\\nconsole.log(levelOrderBottom(null));\"","module.exports = \"// Given an array where elements are sorted in ascending order, convert it to a height balanced BST.\\n\\n// For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\\n\\n// Example:\\n\\n// Given the sorted array: [-10,-3,0,5,9],\\n\\n// One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:\\n\\n//       0\\n//      / \\\\\\n//    -3   9\\n//    /   /\\n//  -10  5\\nconst TreeNode = (val) => {\\n    this.val = val;\\n    this.left = null;\\n    this.right = null;\\n}\\nconst buildBST = (nums, start, end) => {\\n    if (start > end) return null;\\n    let mid = Math.floor((start + end) / 2);\\n    let bst = new TreeNode(nums[mid]);\\n    bst.left = buildBST(nums, start, mid - 1);\\n    bst.right = buildBST(nums, mid + 1, end);\\n    return bst;\\n}\\n\\nconst sortedArrayToBST = nums => {\\n    if (nums.length === 0) return null;\\n    return buildBST(nums, 0, nums.length - 1);\\n}\\n\\nconsole.log(sortedArrayToBST([123]));\"","module.exports = \"// Given a binary tree, find its minimum depth.\\n\\n// The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\\n\\n// Note: A leaf is a node with no children.\\n\\n// Example:\\n\\n// Given binary tree [3,9,20,null,null,15,7],\\n\\n//     3\\n//    / \\\\\\n//   9  20\\n//     /  \\\\\\n//    15   7\\n// return its minimum depth = 2.\\n\\nvar minDepth = function(root) {\\n    // sanity Check\\n    if (root === null) return 0;\\n    const left = minDepth(root.left);\\n    const right = minDepth(root.right);\\n    return (left === 0 || right === 0) ? (right + left ) + 1 : Math.min(left, right) + 1;\\n};\"","module.exports = \"// Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.\\n\\n// Note: A leaf is a node with no children.\\n\\n// Example:\\n\\n// Given the below binary tree and sum = 22,\\n\\n//       5\\n//      / \\\\\\n//     4   8\\n//    /   / \\\\\\n//   11  13  4\\n//  /  \\\\      \\\\\\n// 7    2      1\\n// return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.\\n\\nvar hasPathSum = function(root, sum) {\\n    // sanity check\\n    if (root === null) return false;\\n    if (root.left === null && root.right === null && root.val === sum) return true;\\n    return hasPathSum(root.left, sum - root.val) ||  hasPathSum(root.right, sum - root.val);\\n}\"","module.exports = \"// Given a binary tree, return the preorder traversal of its nodes' values.\\n\\n// Example:\\n\\n// Input: [1,null,2,3]\\n//    1\\n//     \\\\\\n//      2\\n//     /\\n//    3\\n\\n// Output: [1,2,3]\\n\\nconst preorderTraversal = root => {\\n    let result = [];\\n    const traversal = node => {\\n        if (node === null) return result;\\n        result.push(node.val);\\n        traversal(node.left);\\n        traversal(node.right);\\n    }\\n    traversal(root);\\n    return result;\\n}\\n\\nconsole.log(preorderTraversal(null));\"","module.exports = \"// Given a binary tree, return the postorder traversal of its nodes' values.\\n\\n// Example:\\n\\n// Input: [1,null,2,3]\\n//    1\\n//     \\\\\\n//      2\\n//     /\\n//    3\\n\\n// Output: [3,2,1]\\n\\nvar postorderTraversal = function(root) {\\n    let result = [];\\n    const traversal = node => {\\n        if (node === null) return result;\\n        traversal(node.left);\\n        traversal(node.right);\\n        result.push(node.val);\\n    }\\n    traversal(root);\\n    return result;\\n}\\nconsole.log(postorderTraversal(null));\"","module.exports = \"// Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.\\n\\n// Example:\\n\\n// Input: [1,2,3,null,5,null,4]\\n// Output: [1, 3, 4]\\n// Explanation:\\n\\n//    1            <---\\n//  /   \\\\\\n// 2     3         <---\\n//  \\\\     \\\\\\n//   5     4       <---\\n\\n\\nconst rightSideView = root => {\\n    if (root === null) { return []; }\\n    let result = [];\\n    let queue = [root];\\n    while (queue.length > 0) {\\n        let size = queue.length;\\n        let current = [];\\n        for (let i = 0; i < size; i++) {\\n            let head = queue.shift();\\n            current.push(head.val);\\n            if (head.left !== null) { queue.push(head.left); }\\n            if (head.right !== null) { queue.push(head.right); }\\n        }\\n        result.push(current[current.length - 1]);\\n    }\\n    return result;\\n}\\n\\nconsole.log(rightSideView(null));\\n\"","module.exports = \"// Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\\n\\n// Example 1:\\n\\n// Input:\\n// 11110\\n// 11010\\n// 11000\\n// 00000\\n\\n// Output: 1\\n// Example 2:\\n\\n// Input:\\n// 11000\\n// 11000\\n// 00100\\n// 00011\\n\\n// Output: 3\\n\\nconst updateLandToWater = (grid, i, j) => {\\n    if (i< 0 || i >= grid.length || j < 0 || j>= grid[0].length || grid[i][j] !== '1') {\\n        return\\n    }\\n    grid[i][j] = 0;\\n    updateLandToWater(grid, i - 1, j);\\n    updateLandToWater(grid, i + 1, j);\\n    updateLandToWater(grid, i, j - 1);\\n    updateLandToWater(grid, i, j + 1);\\n}\\n\\nvar numIslands = function(grid) {\\n    let count = 0;\\n    for (let i = 0; i < grid.length; i++) {\\n        for (let j = 0; j < grid[0].length; j++) {\\n            if (grid[i][j] === 1) {\\n                count++;\\n                updateLandToWater(grid, i, j);\\n            }\\n        }\\n    }\\n    return count;\\n};\\n\\nconsole.log(numIslands(null));\"","module.exports = \"// Invert a binary tree.\\n\\n// Example:\\n\\n// Input:\\n\\n//      4\\n//    /   \\\\\\n//   2     7\\n//  / \\\\   / \\\\\\n// 1   3 6   9\\n// Output:\\n\\n//      4\\n//    /   \\\\\\n//   7     2\\n//  / \\\\   / \\\\\\n// 9   6 3   1\\n\\nvar invertTree = function(root) {\\n    // sanity check\\n    if (root === null) { return root; }\\n    let queue = [root];\\n    while(queue.length > 0) {\\n        let node = queue.shift();\\n        let temp = node.left;\\n        node.left = node.right;\\n        node.right = temp;\\n        if (node.left !== null) { queue.push(node.left); }\\n        if (node.right !== null) { queue.push(node.right); }\\n    }\\n    return root;\\n};\\n\\nconsole.log(invertTree(null));\"","module.exports = \"// Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.\\n\\n// Note: \\n// You may assume k is always valid, 1 ≤ k ≤ BST's total elements.\\n\\n// Example 1:\\n\\n// Input: root = [3,1,4,null,2], k = 1\\n//    3\\n//   / \\\\\\n//  1   4\\n//   \\\\\\n//    2\\n// Output: 1\\n// Example 2:\\n\\n// Input: root = [5,3,6,2,4,null,null,1], k = 3\\n//        5\\n//       / \\\\\\n//      3   6\\n//     / \\\\\\n//    2   4\\n//   /\\n//  1\\n// Output: 3\\n\\nconst kthSmallest = (root, k) => {\\n    let counter = 0;\\n    let kth = null;\\n    let inorderTraversal = node => {\\n        if (node.left !== null) { inorderTraversal(node.left); }\\n        counter++;\\n        if (counter === k) { kth = node; }\\n        if (node.right !== null) { inorderTraversal(node.right); }\\n    }\\n    inorderTraversal(root);\\n    return kth.val;\\n}\\n\\nconsole.log(kthSmallest(null,0));\"","module.exports = \"// Given a binary tree, return all root-to-leaf paths.\\n\\n// Note: A leaf is a node with no children.\\n\\n// Example:\\n\\n// Input:\\n\\n//    1\\n//  /   \\\\\\n// 2     3\\n//  \\\\\\n//   5\\n\\n// Output: [\\\"1->2->5\\\", \\\"1->3\\\"]\\n\\n// Explanation: All root-to-leaf paths are: 1->2->5, 1->3\\n\\nconst binaryTreePaths = root => {\\n    // sanity check\\n    var result = [];\\n    if (!root) { return result; }\\n    const preorderTraversal = (node, content) => {\\n        if(!node.left && !node.right) { result.push(content + node.val); }\\n        if (node.left !== null) { preorderTraversal(node.left, content + node.val + '->'); }\\n        if (node.right !== null) { preorderTraversal(node.right, content + node.val + '->'); }\\n    }\\n    preorderTraversal(root, '');\\n    return result;\\n}\\n\\nconsole.log(binaryTreePaths(null));\"","module.exports = \"// Given a binary tree, find the leftmost value in the last row of the tree.\\n\\n// Example 1:\\n// Input:\\n\\n//     2\\n//    / \\\\\\n//   1   3\\n\\n// Output:\\n// 1\\n// Example 2: \\n// Input:\\n\\n//         1\\n//        / \\\\\\n//       2   3\\n//      /   / \\\\\\n//     4   5   6\\n//        /\\n//       7\\n\\n// Output:\\n// 7\\n// Note: You may assume the tree (i.e., the given root node) is not NULL.\\n// preorder traversal - first vist the most left child and traversal back - DFS\\n// leve order traversal - collect all the level node vale and get the last row of frist child - not idea solution\\n\\nconst findBottomLeftValue = root => {\\n    let result;\\n    let maxHeight = 0;\\n    const preorderTraversal = (node, level) => {\\n        if (node === null) return node;\\n        if (level > maxHeight) {\\n            result = node.val;\\n            maxHeight = level;\\n        }\\n        preorderTraversal(node.left, level + 1);\\n        preorderTraversal(node.right, level + 1);\\n    }\\n    preorderTraversal(root, 1);\\n    return result;\\n}\\n\\nconst findBottomLeftValue2 = root => {\\n    // sanity check\\n    if (root === null) return [];\\n    let result;\\n    let queue = [root];\\n    while(queue.length > 0) {\\n        let size = queue.length;\\n        let current = [];\\n        for (let i = 0; i < size; i++) {\\n            let head = queue.shift();\\n            current.push(head.val);\\n            if (head.left !== null) { queue.push(head.left); }\\n            if (head.right !== null) { queue.push(head.right); }\\n        }\\n        result.push(current);\\n    }\\n    return result[result.length - 1][0];\\n}\\n\\nconsole.log(findBottomLeftValue2(null));\\nconsole.log(findBottomLeftValue(null));\"","module.exports = \"// You need to find the largest value in each row of a binary tree.\\n\\n// Example:\\n// Input: \\n//           1\\n//          / \\\\\\n//         3   2\\n//        / \\\\   \\\\  \\n//       5   3   9 \\n\\n// Output: [1, 3, 9]\\n\\n// level order traversal - BFS\\n\\nvar largestValues = function(root) {\\n    // sanity check\\n    if (root === null) return [];\\n\\n    let result = [];\\n    let queue = [root];\\n    while (queue.length > 0){\\n        let size = queue.length;\\n        let current = [];\\n        for (let i = 0; i < size; i++) {\\n            let head = queue.shift();\\n            current.push(head.val);\\n            if (head.left !== null) { queue.push(head.left); }\\n            if (head.right !== null) { queue.push(head.right); }\\n        }\\n        result.push(Math.max(...current));\\n    }\\n    return result;\\n}\\nconsole.log(largestValues(null));\"","module.exports = \"// Example 1:\\n// Input:\\n//      1\\n//     /\\n//    2\\n// Output:\\n// [[\\\"\\\", \\\"1\\\", \\\"\\\"],\\n//  [\\\"2\\\", \\\"\\\", \\\"\\\"]]\\n// Example 2:\\n// Input:\\n//      1\\n//     / \\\\\\n//    2   3\\n//     \\\\\\n//      4\\n// Output:\\n// [[\\\"\\\", \\\"\\\", \\\"\\\", \\\"1\\\", \\\"\\\", \\\"\\\", \\\"\\\"],\\n//  [\\\"\\\", \\\"2\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"3\\\", \\\"\\\"],\\n//  [\\\"\\\", \\\"\\\", \\\"4\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\"]]\\n\\n// 1.allocate empty array with \\\"\\\";\\n// 2.DFS through the tree - preorder traversal\\n// 3.calculate the position [mid] to fill node.val;\\n/**\\n * @param {TreeNode} root\\n * @return {string[][]}\\n */\\nvar getTreeMaxHeight = (root) => {\\n    if (root === null) return 0;\\n    return Math.max(getTreeMaxHeight(root.left), getTreeMaxHeight(root.right)) + 1;\\n}\\n\\nvar fill = (node, result, level, left, right) => {\\n    // sanity checko\\n    if (node === null) return;\\n    let mid = Math.floor((left + right) / 2);\\n    result[level - 1][mid] = node.val.toString();\\n    \\n    fill(node.left, result, level + 1, left, mid - 1);\\n    fill(node.right, result, level + 1, mid + 1, right);\\n}\\n\\nvar printTree = function(root) {\\n    // sanity check\\n    if (root === null) return root;\\n    \\n    // base logic\\n    let result = [];\\n    let maxHeight = getTreeMaxHeight(root);\\n    let maxWidth = Math.pow(2, maxHeight) - 1;\\n\\n    for (let i = 0; i < maxHeight; i++) {\\n        result.push(new Array(maxWidth).fill(''));\\n    }\\n    \\n    fill(root, result, 1, 0, maxWidth - 1);\\n    return result;\\n};\\n\\n\\nconsole.log(printTree(null));\"","module.exports = \"// Given the root node of a binary search tree (BST) and a value. You need to find the node in the BST that the node's value equals the given value. Return the subtree rooted with that node. If such node doesn't exist, you should return NULL.\\n\\n// For example, \\n\\n// Given the tree:\\n//         4\\n//        / \\\\\\n//       2   7\\n//      / \\\\\\n//     1   3\\n\\n// And the value to search: 2\\n// You should return this subtree:\\n\\n//       2     \\n//      / \\\\   \\n//     1   3\\n// In the example above, if we want to search the value 5, since there is no node with value 5, we should return NULL.\\n\\n// Note that an empty tree is represented by NULL, therefore you would see the expected output (serialized tree format) as [], not null.\\n\\nconst searchBST = (root, val) => {\\n    if (root === null) return root;\\n    if (root.val === val) { return root; }\\n    else if (val < root.val && root.left !== null) { return searchBST(root.left, val); }\\n    else if (val > root.val && root.right !== null) { return searchBST(root.right, val); }\\n    else { return []; }\\n}\"","module.exports = \"// Given a binary tree, return the inorder traversal of its nodes' values.\\n\\n// Example:\\n\\n// Input: [1,null,2,3]\\n//    1\\n//     \\\\\\n//      2\\n//     /\\n//    3\\n\\n// Output: [1,3,2]\\n\\n\\nvar inorderTraversal = function(root) {\\n    let result = [];\\n    const traversal = head => {\\n        if (head === null) return head;\\n        traversal(head.left);\\n        result.push(head.val);\\n        traversal(head.right);\\n    }\\n    traversal(root);\\n    return result;\\n}\\nconsole.log(inorderTraversal(null));\"","module.exports = \"// Given a binary tree, determine if it is a valid binary search tree (BST).\\n\\n// Assume a BST is defined as follows:\\n\\n// The left subtree of a node contains only nodes with keys less than the node's key.\\n// The right subtree of a node contains only nodes with keys greater than the node's key.\\n// Both the left and right subtrees must also be binary search trees.\\n// Example 1:\\n\\n// Input:\\n//     2\\n//    / \\\\\\n//   1   3\\n// Output: true\\n// Example 2:\\n\\n//     5\\n//    / \\\\\\n//   1   4\\n//      / \\\\\\n//     3   6\\n// Output: false\\n// Explanation: The input is: [5,1,4,null,null,3,6]. The root node's value\\n//              is 5 but its right child's value is 4.\\n\\n// inorder traversal\\nconst isValidBST = root => {\\n    let result = [];\\n    const traversal = head => {\\n        if (head === null) return head;\\n        traversal(head.left);\\n        result.push(head.val);\\n        traversal(head.right);\\n    }\\n    traversal(root);\\n    \\n    let slow = 0;\\n    let fast = 1;\\n    while (fast <= result.length - 1) {\\n        if (result[slow] >= result[fast]) return false;\\n        slow++;\\n        fast++;\\n    }\\n    return true;\\n}\\n// ----------------------------------------------------------\\nvar isValidBST2 = root => helper(root, null, null)\\n\\nvar helper = (root, min, max) => {\\n  if (root === null) return true\\n  if (min !== null && root.val <= min) return false\\n  if (max !== null && root.val >= max) return false\\n  return helper(root.left, min, root.val) && helper(root.right, root.val, max)\\n}\\n\\nconsole.log(isValidBST(null));\\nconsole.log(isValidBST2(null));\"","module.exports = \"// // https://www.youtube.com/watch?v=vWPCm69MSfs\\n\\n// Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:\\n\\n// Only one letter can be changed at a time.\\n// Each transformed word must exist in the word list. Note that beginWord is not a transformed word.\\n\\n// Input:\\n// beginWord = \\\"hit\\\",\\n// endWord = \\\"cog\\\",\\n// wordList = [\\\"hot\\\",\\\"dot\\\",\\\"dog\\\",\\\"lot\\\",\\\"log\\\",\\\"cog\\\"]\\n\\n// Output: 5\\n\\n// Explanation: As one shortest transformation is \\\"hit\\\" -> \\\"hot\\\" -> \\\"dot\\\" -> \\\"dog\\\" -> \\\"cog\\\", return its length 5.\\n// -----------\\n\\n// Example 2:\\n// Input:\\n// beginWord = \\\"hit\\\"\\n// endWord = \\\"cog\\\"\\n// wordList = [\\\"hot\\\",\\\"dot\\\",\\\"dog\\\",\\\"lot\\\",\\\"log\\\"]\\n\\n// Output: 0\\n\\n// Explanation: The endWord \\\"cog\\\" is not in wordList, therefore no possible transformation.\\n\\n// function ladderLength(beginWord, endWord, wordList) {\\n//     let len = 1;\\n//     let result = [];\\n//     let queue = [beginWord];\\n//     const dict = new Set(wordList);\\n//     const seen = new Set(queue);\\n//     while (queue.length) {\\n//       const next = [];\\n//       for (let v of queue) {\\n//         if (v === endWord) {\\n//           console.log(result);\\n//           return len;\\n//         }\\n        \\n//         const arr = v.split('');\\n//         for (let i = 0; i < arr.length; i++) {\\n//           for (let d = 0; d < 26; d++) {\\n//             arr[i] = String.fromCharCode(97+d);\\n//             const nv = arr.join('');\\n//             if (!seen.has(nv) && dict.has(nv)) {\\n//               next.push(nv);\\n//               seen.add(nv);\\n//             }\\n//             arr[i] = v[i];\\n//           }\\n//         }\\n//         result.push(...next);\\n//       }\\n//       queue = next;\\n//       len++;\\n//     }\\n    \\n//     return 0;\\n//   }\\n\\nconst swapLetterInWord = (string, index, replace) =>{\\n  return string.substring(0, index) + replace + string.substring(index + 1);\\n}\\nconst ladderLength = (beginWord, endWorld, wordList) => {\\n    wordList.splice(wordList.indexOf(beginWord), 1);\\n    let level = 1;\\n    let current = 1;\\n    let next = 0;\\n    let queue = [beginWord];\\n    while(queue.length > 0) {\\n      let word = queue.shift();\\n      current--;\\n      for (let i = 0; i < word.length; i++) {\\n        for (let j = 'a'.charCodeAt(0); j < 'z'.charCodeAt(0); j++) {\\n          let temp = swapLetterInWord(word, i, String.fromCharCode(j));\\n          if (wordList.indexOf(temp) > -1) {\\n            if (temp === endWorld) return level + 1;\\n            next++;\\n            queue.push(temp);\\n            wordList.splice(wordList.indexOf(temp), 1);\\n          }\\n        }\\n      }\\n      if (current === 0) {\\n        current = next;\\n        next = 0;\\n        level++;\\n      }\\n    }\\n    return 0;\\n}\\nconsole.log(ladderLength(\\\"hit\\\", \\\"cog\\\", [\\\"hit\\\",\\\"hot\\\",\\\"dot\\\",\\\"dog\\\",\\\"lot\\\",\\\"log\\\",\\\"cog\\\"]));\"","module.exports = \"// Given a string s, partition s such that every substring of the partition is a palindrome.\\n\\n// Return all possible palindrome partitioning of s.\\n\\n// Example:\\n\\n// Input: \\\"aab\\\"\\n// Output:\\n// [\\n//   [\\\"aa\\\",\\\"b\\\"],\\n//   [\\\"a\\\",\\\"a\\\",\\\"b\\\"]\\n// ]\\n\\n/**\\n * @param {string} s\\n * @return {string[][]}\\n */\\n\\nconst isPalidrome = str => {\\n    let start = 0;\\n    let end = str.length - 1;\\n    while ( start <= end) {\\n        if (str[start] !== str[end]) { return false}\\n        start++;\\n        end--;\\n    }\\n    return true;\\n}\\nconst helper = (str, startIndex, partition, result) => {\\n    // sanity check\\n    if (startIndex === str.length) {\\n        result.push(partition.slice());\\n        return;\\n    }\\n    // core logic\\n    for (let i = startIndex; i < str.length; i++) {\\n        let subStr = str.slice(startIndex, i + 1);\\n        if (!isPalidrome(subStr)) {\\n            continue;\\n        }\\n\\n        partition.push(subStr);\\n        helper(str, i + 1, partition, result);\\n        partition.pop();\\n    }\\n}\\n\\nconst partition = (str) => {\\n    // sanity check\\n    if (str === null || str.length === 0) return [];\\n  \\n    // create result array\\n    let result = [];\\n\\n    // base logic - recursive\\n    helper(str, 0, [], result);\\n\\n    // return\\n    return result;\\n};\\n\\nconsole.log(partition('aab'));\"","module.exports = \"// Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.\\n\\n// A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\\n\\n\\n\\n// Example:\\n\\n// Input: \\\"23\\\"\\n// Output: [\\\"ad\\\", \\\"ae\\\", \\\"af\\\", \\\"bd\\\", \\\"be\\\", \\\"bf\\\", \\\"cd\\\", \\\"ce\\\", \\\"cf\\\"].\\n\\n/**\\n * @param {string} digits\\n * @return {string[]}\\n */\\n\\nconst helper = (letters, digits, startIndex, combination, result) => {\\n    // sanity check\\n    if (startIndex === digits.length) { result.push(combination.join('')); return; }\\n    \\n    // core logic\\n    for (let i = 0; i < letters[digits[startIndex]].length; i++){\\n        const c = letters[digits[startIndex]][i];\\n        combination.push(c);\\n        helper(letters, digits, startIndex + 1 , combination, result);\\n        combination.pop();\\n    }\\n}\\nvar letterCombinations = function(digits) {\\n    const letters = {\\n        2: 'abc',\\n        3: 'def',\\n        4: 'ghi',\\n        5: 'jkl',\\n        6: 'mno',\\n        7: 'pqrs',\\n        8: 'tuv',\\n        9: 'wxyz'\\n    };\\n    // sanity check\\n    if (digits.length === 0) return [];\\n        \\n    // create empty array to store the combinations\\n    let result = [];\\n    \\n    // base logice - recursive\\n    helper(letters, digits, 0, [], result);\\n\\n    // return\\n    return result;\\n};\\n\\nconsole.log(letterCombinations(\\\"23\\\"));\\n\\n\"","module.exports = \"// Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.\\n\\n// The same repeated number may be chosen from candidates unlimited number of times.\\n\\n// Note:\\n\\n// All numbers (including target) will be positive integers.\\n// The solution set must not contain duplicate combinations.\\n// Example 1:\\n\\n// Input: candidates = [2,3,6,7], target = 7,\\n// A solution set is:\\n// [\\n//   [7],\\n//   [2,2,3]\\n// ]\\n\\nconst helper = (candidates, target, startIndex, combination, result) => {\\n    // sanity check \\n    if (target === 0) { result.push(combination.slice()) }\\n    \\n    for (let i = startIndex; i < candidates.length; i++) {\\n        if (target < candidates[i]) break;\\n        if (i !== 0 && candidates[i] === candidates[i - 1]) continue;\\n        \\n        combination.push(candidates[i]);\\n        helper(candidates, target - candidates[i], i, combination, result);\\n        combination.pop();\\n    }\\n}\\n\\nconst combinationSum = (candidates, target) => {\\n    // sanity check\\n    if (target === 0) return [];\\n    if (candidates === null && candidates.length === 0) return [];\\n    \\n    // create result array\\n    let result = [];\\n    \\n    // sort candidates\\n    candidates.sort((a, b) => a - b);\\n    \\n    // call recursion\\n    helper(candidates, target, 0, [], result);\\n    return result;   \\n}\\n\\nconsole.log(combinationSum([1,3,4], 4));\"","module.exports = \"// Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.\\n\\n// Each number in candidates may only be used once in the combination.\\n\\n// Note:\\n\\n// All numbers (including target) will be positive integers.\\n// The solution set must not contain duplicate combinations.\\n// Example 1:\\n\\n// Input: candidates = [10,1,2,7,6,1,5], target = 8,\\n// A solution set is:\\n// [\\n//   [1, 7],\\n//   [1, 2, 5],\\n//   [2, 6],\\n//   [1, 1, 6]\\n// ]\\n\\n/**\\n * @param {number[]} candidates\\n * @param {number} target\\n * @return {number[][]}\\n */\\nconst helper = (candidates, target, startIndex, combination, result) => {\\n    // sanity check\\n    if (target === 0) { result.push(combination.slice()); }\\n\\n    // core logic\\n    for (let i = startIndex; i < candidates.length; i++) {\\n        if (target < candidates[i]) break;\\n        if (i !== startIndex && candidates[i] === candidates[i-1]) continue;\\n        combination.push(candidates[i]);\\n        helper(candidates, target - candidates[i], i + 1, combination, result);\\n        combination.pop();\\n    }\\n}\\n\\nvar combinationSum2 = function(candidates, target) {\\n    // sanity check\\n    if (target === 0) return [];\\n    if (candidates === null && candidates.length === 0) return [];\\n\\n    // create empty result array\\n    let result = [];\\n\\n    // sort candidate\\n    candidates.sort(( a, b) => a - b);\\n\\n    // basic logic recursion\\n    helper(candidates, target, 0, [], result);\\n    \\n    // return\\n    return result;\\n};\\n\\nconsole.log(combinationSum2(null,null));\"","module.exports = \"// Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.\\n\\n// Example:\\n\\n// Input: n = 4, k = 2\\n// Output:\\n// [\\n//   [2,4],\\n//   [3,4],\\n//   [2,3],\\n//   [1,2],\\n//   [1,3],\\n//   [1,4],\\n// ]\\n\\n/**\\n * @param {number} n\\n * @param {number} k\\n * @return {number[][]}\\n */\\n\\nconst helper = (nums, k, startIndex, combination, result) => {\\n    // sanity check\\n    if (combination.length === k) { result.push(combination.slice()); }\\n    // core logic \\n    for (let i = startIndex; i < nums.length; i++) {\\n        combination.push(nums[i]);\\n        helper(nums, k, i + 1, combination, result) ;\\n        combination.pop();\\n    }\\n}\\n\\nvar combine = function(n, k) {\\n    // sanity check\\n    if (n === 0 || k === 0) { return []}\\n    \\n    let result = [];\\n    let nums = [];\\n    for (let i = 1; i <= n; i++) { nums.push(i); }\\n    \\n    helper(nums, k, 0, [], result);\\n    return result;\\n};\\n\\nconsole.log(combine(4,4));\"","module.exports = \"// You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\\n\\n// Example 1:\\n\\n// Input: coins = [1, 2, 5], amount = 11\\n// Output: 3 \\n// Explanation: 11 = 5 + 5 + 1\\n\\n/**\\n * @param {number[]} coins\\n * @param {number} amount\\n * @return {number}\\n */\\nvar coinChange = function(coins, amount) {\\n    var dp=new Array(amount+1);\\n    dp.fill(Number.MAX_VALUE-1);\\n    dp[0]=0;\\n    for(var i=1;i<=amount;i++)\\n    {\\n        for(var j=0;j<coins.length;j++) {\\n            if(coins[j]<=i){\\n                dp[i]=Math.min(dp[i-coins[j]]+1, dp[i]);\\n            }\\n        }\\n    }\\n   return dp[amount] === Number.MAX_VALUE-1 ? -1:dp[amount];  \\n};\\n\\nconsole.log(coinChange(12));\"","module.exports = \"// Given an array of integers, return indices of the two numbers such that they add up to a specific target.\\n\\n// You may assume that each input would have exactly one solution, and you may not use the same element twice.\\n\\n// Example:\\n\\n// Given nums = [2, 7, 11, 15], target = 9,\\n\\n// Because nums[0] + nums[1] = 2 + 7 = 9,\\n// return [0, 1].\\n\\nconst twoSum = (nums, target) => {\\n    // sanity check\\n    if (nums === null) { return []; }\\n    let map = {};\\n    for (let i = 0; i < nums.length; i++) {\\n        let current = nums[i];\\n        let counter = target - current;\\n        if (map[current] === undefined) {\\n            map[counter] = i;\\n        } else {\\n            return [map[current], i];\\n        }\\n    }\\n}\\nconsole.log(twoSum([],0));\"","module.exports = \"// Given an array of integers, find if the array contains any duplicates.\\n\\n// Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\\n\\n// Example 1:\\n\\n// Input: [1,2,3,1]\\n// Output: true\\n// Example 2:\\n\\n// Input: [1,2,3,4]\\n// Output: false\\n// Example 3:\\n\\n// Input: [1,1,1,3,3,4,3,2,4,2]\\n// Output: true\\n\\nconst containsDuplicate = nums => {\\n    let map = {};\\n    for (let i = 0; i < nums.length; i++) {\\n        let current = nums[i];\\n        if(map[current] === undefined) {\\n            map[current] = true;\\n        } else {\\n            return true;\\n        }\\n    }\\n    return false;\\n}\\nconsole.log(containsDuplicate(null));\"","module.exports = \"// A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same element.\\n\\n// Now given an M x N matrix, return True if and only if the matrix is Toeplitz.\\n \\n\\n// Example 1:\\n\\n// Input:\\n// matrix = [\\n//   [1,2,3,4],\\n//   [5,1,2,3],\\n//   [9,5,1,2]\\n// ]\\n// Output: True\\n// Explanation:\\n// In the above grid, the diagonals are:\\n// \\\"[9]\\\", \\\"[5, 5]\\\", \\\"[1, 1, 1]\\\", \\\"[2, 2, 2]\\\", \\\"[3, 3]\\\", \\\"[4]\\\".\\n// In each diagonal all elements are the same, so the answer is True.\\n\\nconst isToeplitzMatrix = matrix => {\\n    for (let i = 0; i < matrix.length - 1; i++) {\\n        for(let j = 0; j < matrix[0].length - 1; j++) {\\n           if (matrix[i][j] !== matrix[i+1][j+1]) return false;\\n        }\\n    }\\n    return true;\\n}\\nconsole.log(isToeplitzMatrix(null));\"","module.exports = \"// You're given strings J representing the types of stones that are jewels, and S representing the stones you have.  Each character in S is a type of stone you have.  You want to know how many of the stones you have are also jewels.\\n\\n// The letters in J are guaranteed distinct, and all characters in J and S are letters. Letters are case sensitive, so \\\"a\\\" is considered a different type of stone from \\\"A\\\".\\n\\n// Example 1:\\n\\n// Input: J = \\\"aA\\\", S = \\\"aAAbbbb\\\"\\n// Output: 3\\n// Example 2:\\n\\n// Input: J = \\\"z\\\", S = \\\"ZZ\\\"\\n// Output: 0\\n\\nconst numJewelsInStones = (jStone, sStone ) => {\\n    let result = 0;\\n    let map = {};\\n    for (let j = 0; j < jStone.length; j++) {\\n        map[jStone[j]] = true;\\n    }\\n\\n    for (let s = 0; s < sStone.length; s++) {\\n        if (map[sStone[s]]) { result++; }\\n    }\\n    return result;\\n}\\nconsole.log(numJewelsInStones(null,null));\"","module.exports = \"// International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: \\\"a\\\" maps to \\\".-\\\", \\\"b\\\" maps to \\\"-...\\\", \\\"c\\\" maps to \\\"-.-.\\\", and so on.\\n\\n// For convenience, the full table for the 26 letters of the English alphabet is given below:\\n\\n// [\\\".-\\\",\\\"-...\\\",\\\"-.-.\\\",\\\"-..\\\",\\\".\\\",\\\"..-.\\\",\\\"--.\\\",\\\"....\\\",\\\"..\\\",\\\".---\\\",\\\"-.-\\\",\\\".-..\\\",\\\"--\\\",\\\"-.\\\",\\\"---\\\",\\\".--.\\\",\\\"--.-\\\",\\\".-.\\\",\\\"...\\\",\\\"-\\\",\\\"..-\\\",\\\"...-\\\",\\\".--\\\",\\\"-..-\\\",\\\"-.--\\\",\\\"--..\\\"]\\n// Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \\\"cab\\\" can be written as \\\"-.-.-....-\\\", (which is the concatenation \\\"-.-.\\\" + \\\"-...\\\" + \\\".-\\\"). We'll call such a concatenation, the transformation of a word.\\n\\n// Return the number of different transformations among all words we have.\\n\\n// Example:\\n// Input: words = [\\\"gin\\\", \\\"zen\\\", \\\"gig\\\", \\\"msg\\\"]\\n// Output: 2\\n// Explanation: \\n// The transformation of each word is:\\n// \\\"gin\\\" -> \\\"--...-.\\\"\\n// \\\"zen\\\" -> \\\"--...-.\\\"\\n// \\\"gig\\\" -> \\\"--...--.\\\"\\n// \\\"msg\\\" -> \\\"--...--.\\\"\\n\\n// There are 2 different transformations, \\\"--...-.\\\" and \\\"--...--.\\\".\\n\\nvar uniqueMorseRepresentations = function(words) {\\n    let morseCodeLookup = [\\\".-\\\",\\\"-...\\\",\\\"-.-.\\\",\\\"-..\\\",\\\".\\\",\\\"..-.\\\",\\\"--.\\\",\\\"....\\\",\\\"..\\\",\\\".---\\\",\\\"-.-\\\",\\\".-..\\\",\\\"--\\\",\\\"-.\\\",\\\"---\\\",\\\".--.\\\",\\\"--.-\\\",\\\".-.\\\",\\\"...\\\",\\\"-\\\",\\\"..-\\\",\\\"...-\\\",\\\".--\\\",\\\"-..-\\\",\\\"-.--\\\",\\\"--..\\\"];\\n    let translatedWords = [];\\n    words.forEach(word => {\\n        let wordSplit = word.split('');\\n        let compiledWord = '';\\n        wordSplit.forEach((character, idx) => {\\n            compiledWord += morseCodeLookup[word.charCodeAt(idx) - 97];\\n        })\\n        translatedWords.push(compiledWord);\\n    });\\n    \\n    let filteredWords = [];\\n    translatedWords.forEach(word => {\\n        if(!filteredWords.includes(word)) filteredWords.push(word);\\n    })\\n    return filteredWords.length;\\n};\\n\\nconsole.log(uniqueMorseRepresentations(''));\"","module.exports = \"// Given a binary tree\\n\\n// struct TreeLinkNode {\\n//   TreeLinkNode *left;\\n//   TreeLinkNode *right;\\n//   TreeLinkNode *next;\\n// }\\n// Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\\n\\n// Initially, all next pointers are set to NULL.\\n\\n// Note:\\n\\n// You may only use constant extra space.\\n// Recursive approach is fine, implicit stack space does not count as extra space for this problem.\\n// You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).\\n// Example:\\n\\n// Given the following perfect binary tree,\\n\\n//      1\\n//    /  \\\\\\n//   2    3\\n//  / \\\\  / \\\\\\n// 4  5  6  7\\n// After calling your function, the tree should look like:\\n\\n//      1 -> NULL\\n//    /  \\\\\\n//   2 -> 3 -> NULL\\n//  / \\\\  / \\\\\\n// 4->5->6->7 -> NULL\\n\\nconst connect = node => {\\n    // sanity check\\n    if (node === null) return;\\n    if (node.left !== null) {\\n        node.left.next = node.right;\\n    }\\n    if (node.next !== null && node.right !== null) {\\n        node.right.next = node.next.left;\\n    }\\n    connect(node.left);\\n    connect(node.right);\\n}\"","module.exports = \"// Given a linked list, determine if it has a cycle in it.\\n\\n// Follow up:\\n// Can you solve it without using extra space?\\n\\nconst hasCycle = head => {\\n    if (head === null) return false;\\n    let slow = head;\\n    let fast = head;\\n    while(fast.next !== null && fast.next.next !== null) {\\n        slow = slow.next;\\n        fast = fast.next.next;\\n        if (slow === fast) return true;\\n    }\\n    return false;\\n}\\n\\nconsole.log(hasCycle(null));\"","module.exports = \"// Sort a linked list in O(n log n) time using constant space complexity.\\n\\n// Example 1:\\n\\n// Input: 4->2->1->3\\n// Output: 1->2->3->4\\n// Example 2:\\n\\n// Input: -1->5->3->4->0\\n// Output: -1->0->3->4->5\\n \\nconst ListNode = (val) => {\\n    this.val = val;\\n    this.next = null;\\n}\\nconst mergeTwoLists = (list1, list2) => {\\n    let mergeTwoList = new ListNode(0);\\n    let current = mergeTwoList;\\n    while(list1 !== null && list2 !== null) {\\n        if (list1.val <= list2.val) {\\n            current.next = list1;\\n            list1 = list1.next;\\n        } else {\\n            current.next = list2;\\n            list2 = list2.next;\\n        }\\n        current = current.next;\\n    }\\n    if (list1 === null) { current.next = list2; }\\n    if (list2 === null) { current.next = list1; }\\n    return mergeTwoList.next;\\n}\\nconst sortList = head => {\\n    if (head === null || head.next === null) return head;\\n    let pre = head, slow = head, fast = head;\\n    while(fast !== null && fast.next !== null) {\\n        pre = slow;\\n        slow = slow.next;\\n        fast = fast.next.next;\\n    }\\n    pre.next = null;\\n    return mergeTwoLists(sortList(head), sortList(slow))\\n}\"","module.exports = \"// Given a linked list, remove the n-th node from the end of list and return its head.\\n\\n// Example:\\n\\n// Given linked list: 1->2->3->4->5, and n = 2.\\n\\n// After removing the second node from the end, the linked list becomes 1->2->3->5.\\nconst ListNode = val => {\\n    this.val = val;\\n    this.next = null;\\n}\\nconst removeNthFromEnd = (head, n) => {\\n    if (head === null && n === 0) return head;\\n    let dummyNode = new ListNode(0);\\n    dummyNode.next = head;\\n    let slow = dummyNode;\\n    let fast = dummyNode;\\n\\n    for (let i = 0; i < n; i++) {\\n        fast = fast.next;\\n    }\\n\\n    while(fast.next) {\\n        slow = slow.next;\\n        fast = fast.next;\\n    }\\n    slow.next = slow.next.next;\\n    return dummyNode.next;\\n}\\n\\nconsole.log(removeNthFromEnd(new ListNode(0), 1));\"","module.exports = \"// You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\\n\\n// You may assume the two numbers do not contain any leading zero, except the number 0 itself.\\n\\n// Example:\\n\\n// Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)\\n// Output: 7 -> 0 -> 8\\n// Explanation: 342 + 465 = 807.\\n\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nconst ListNode = val => {\\n    this.val = val;\\n    this.next = null;\\n};\\nvar addTwoNumbers = function(l1, l2) {\\n    let twoSum = new ListNode(0);\\n    let cur = twoSum;\\n    let carryOver = 0;\\n    while(l1 || l2) {\\n       let val1 = l1 && l1.val !== null ? l1.val : 0;\\n       let val2 = l2 && l2.val !== null ? l2.val : 0;\\n       let sum = val1 + val2 + carryOver;\\n       if (sum >= 10) {\\n          cur.next = new ListNode(sum % 10);\\n          carryOver = Math.floor(sum / 10);\\n       } else {\\n          cur.next = new ListNode(sum);\\n          carryOver = 0;\\n       }\\n       cur = cur.next;\\n       l1 = l1 && l1.next;\\n       l2 = l2 && l2.next;\\n    }\\n    if (carryOver > 0) {\\n        cur.next = new ListNode(carryOver);\\n    }\\n    return twoSum.next;\\n  };\\n\\n  console.log(addTwoNumbers(null, null));\"","module.exports = \"// Remove all elements from a linked list of integers that have value val.\\n\\n// Example:\\n\\n// Input:  1->2->6->3->4->5->6, val = 6\\n// Output: 1->2->3->4->5\\n\\n/**\\n * @param {ListNode} head\\n * @param {number} val\\n * @return {ListNode}\\n */\\nconst ListNode = (val) => {\\n    this.val = val;\\n    this.next = null;\\n}\\nvar removeElements = (head, val) => {\\n    let dummyNode = new ListNode(0);\\n    dummyNode.next = head;\\n    head = dummyNode;\\n    while(head.next !== null) {\\n        if (head.next.val === val) {\\n            head.next = head.next.next;\\n        } else {\\n            head = head.next;\\n        }\\n    }\\n    return dummyNode.next\\n}\\nconsole.log(removeElements(null,null));\"","module.exports = \"// Reverse a singly linked list.\\n\\n// Example:\\n\\n// Input: 1->2->3->4->5->NULL\\n// Output: 5->4->3->2->1->NULL\\n\\nconst reverseList = head => {\\n    if (head === null) return head;\\n    let firstNode = head;\\n    let currentNode = head.next;\\n    while(currentNode) {\\n        head.next = currentNode.next;\\n        currentNode.next = firstNode;\\n        firstNode = currentNode\\n        currentNode = head.next;\\n    }\\n    return firstNode;\\n}\\nconsole.log(reverseList(null));\"","module.exports = \"// Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\\n\\n// Example:\\n\\n// Input: 1->2->4, 1->3->4\\n// Output: 1->1->2->3->4->4\\n\\nconst ListNode = val => {\\n    this.val = val;\\n    this.next = null;\\n}\\nconst mergeTwoLists = (list1, list2) => {\\n    let mergedList = new ListNode(0);\\n    let prev = mergedList;\\n    while(list1 !== null && list2 !== null) {\\n        if (list1.val <= list2.val) {\\n            prev.next = list1;\\n            list1 = list1.next;\\n        } else {\\n            prev.next = list2;\\n            list2 = list2.next;\\n        }\\n        prev = prev.next;\\n    }\\n    if (list1 === null) { prev.next = list2; }\\n    if (list2 === null) { prev.next = list1;}\\n    return mergedList.next;\\n}\\nconsole.log(mergeTwoLists(null,null));\"","module.exports = \"// Given a singly linked list, determine if it is a palindrome.\\n\\n// Example 1:\\n\\n// Input: 1->2\\n// Output: false\\n// Example 2:\\n\\n// Input: 1->2->2->1\\n// Output: true\\n// Follow up:\\n// Could you do it in O(n) time and O(1) space?\\n\\nconst reverseList = head => {\\n    if (head === null) return head;\\n    let firstNode = head;\\n    let currentNode = head.next;\\n    while (currentNode) {\\n        head.next = currentNode.next;\\n        currentNode.next = firstNode;\\n        firstNode = currentNode;\\n        currentNode = head.next;\\n    }\\n    return firstNode;\\n}\\nconst isPalindrome = head =>{\\n    if (head === null || head.next === null) return true;\\n    let slow = head;\\n    let fast = head;\\n    while (fast.next !== null && fast.next.next !== null) {\\n        slow = slow.next;\\n        fast = fast.next.next;\\n    }\\n    slow.next = reverseList(slow.next);\\n    slow = slow.next;\\n    \\n    while (slow != null) {\\n        if (slow.val !== head.val) return false;\\n        slow = slow.next;\\n        head = head.next;\\n    }\\n    return true;\\n}\\n\\nconsole.log(isPalindrome(null));\\n\"","module.exports = \"// Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.\\n\\n// Given linked list -- head = [4,5,1,9], which looks like following:\\n\\n//     4 -> 5 -> 1 -> 9\\n// Example 1:\\n\\n// Input: head = [4,5,1,9], node = 5\\n// Output: [4,1,9]\\n// Explanation: You are given the second node with value 5, the linked list\\n//              should become 4 -> 1 -> 9 after calling your function.\\n\\nconst deleteNode = node => {\\n    node.next = node.next.next;\\n    node.val = node.next.val;\\n}\\nconsole.log(deleteNode(null));\"","module.exports = \"// Given a sorted linked list, delete all duplicates such that each element appear only once.\\n\\n// Example 1:\\n\\n// Input: 1->1->2\\n// Output: 1->2\\n// Example 2:\\n\\n// Input: 1->1->2->3->3\\n// Output: 1->2->3\\n\\nconst deleteDuplicates = head => { \\n    if (head === null) { return head; }\\n    let current = head;\\n    while (current) {\\n        if(current.next && current.next.val === current.val) {\\n            current.next = current.next.next;\\n        } else {\\n            current = current.next;\\n        }\\n    }\\n    return head;\\n}\\nconsole.log(deleteDuplicates(null));\"","module.exports = \"// Given a non-empty, singly linked list with head node head, return a middle node of linked list.\\n\\n// If there are two middle nodes, return the second middle node.\\n\\n// Example 1:\\n\\n// Input: [1,2,3,4,5]\\n// Output: Node 3 from this list (Serialization: [3,4,5])\\n// The returned node has value 3.  (The judge's serialization of this node is [3,4,5]).\\n// Note that we returned a ListNode object ans, such that:\\n// ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL.\\n\\nvar middleNode = function(head) {\\n    let slow = head;\\n    let fast = head;\\n    while (fast && fast.next) {\\n        slow = slow.next;\\n        fast = fast.next.next;\\n    }\\n    return slow;\\n};\\n\\nconsole.log(middleNode(null));\"","module.exports = \"// Given a collection of distinct integers, return all possible permutations.\\n\\n// Example:\\n\\n// Input: [1,2,3]\\n// Output:\\n// [\\n//   [1,2,3],\\n//   [1,3,2],\\n//   [2,1,3],\\n//   [2,3,1],\\n//   [3,1,2],\\n//   [3,2,1]\\n// ]\\n\\n/**\\n * @param {number[]} nums\\n * @return {number[][]}\\n */\\nconst helper = (nums, list, result) => {\\n    // sanity check\\n    if (list.length === nums.length) { result.push(list.slice()); }\\n\\n    // core logic\\n    for (let i = 0; i < nums.length; i++) {\\n        if (list.includes(nums[i])) { continue; }\\n        list.push(nums[i]);\\n        helper(nums, list, result );\\n        list.pop();\\n    }\\n}\\nconst permute = nums => {\\n    // sanity check\\n    if (nums === null || nums.length === 0) return [];\\n\\n    // create an empty result array\\n    let result = [];\\n\\n    // base logic\\n    helper(nums, [], result);\\n    \\n    // return\\n    return result;\\n};\\n\\nconsole.log(permute([1,2,3,4]));\"","module.exports = \"// Given a string containing only digits, restore it by returning all possible valid IP address combinations.\\n\\n// Example:\\n\\n// Input: \\\"25525511135\\\"\\n// Output: [\\\"255.255.11.135\\\", \\\"255.255.111.35\\\"]\\n\\n/**\\n * @param {string} s\\n * @return {string[]}\\n */\\n\\n// function restoreIpAddresses2(s) {\\n//     const res = [];\\n//     dfs([], 0);\\n//     return res;\\n    \\n//     function dfs(prefix, idx) {\\n//       if (prefix.length === 4 && idx === s.length) {\\n//         res.push(prefix.join('.'));\\n//         return;\\n//       }\\n      \\n//       if (prefix.length === 4 || idx === s.length) {\\n//         return;\\n//       }\\n      \\n//       for (let r = idx; r < s.length; r++) {\\n//         if (r !== idx && s[idx] === '0') return;\\n        \\n//         const num = parseInt(s.slice(idx, r+1));\\n//         if (num > 255) {\\n//           return;\\n//         }\\n//         prefix.push(num);\\n//         dfs(prefix, r+1);\\n//         prefix.pop();\\n//       }\\n//     }\\n//   }\\n\\n\\nconst dfs = (str, idx, combinations, res) => {\\n    // once the combination contains 4 sets and index of string is at the end \\n    // push the combination to result \\n    if (combinations.length === 4 && idx === str.length) {\\n      res.push(combinations.join('.'));\\n      return;\\n    }\\n    \\n    if (combinations.length === 4 || idx === str.length) return;\\n    \\n    for (let i = idx; i < str.length; i++) {\\n      // a combination set should be less than 255\\n      const num = parseInt(str.slice(idx, i+1));\\n      if (i !== idx && str[idx] === '0') return;\\n      if (num > 255) return;\\n\\n      combinations.push(num);\\n      dfs(str, i+1, combinations, res);\\n      combinations.pop();\\n    }\\n}\\nvar restoreIpAddresses = function(str) {\\n    // sanity check\\n    if (str === null || str.length === 0) { return []}\\n\\n    // create empty array to store result\\n    let result = [];\\n\\n    // base logic - recursion\\n    dfs(str, 0, [], result);\\n\\n    // result\\n    return result;\\n};\\n\\nconsole.log(restoreIpAddresses('25525511135'));\"","module.exports = \"// Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.\\n\\n// The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.\\n\\n// Note:\\n\\n// Your returned answers (both index1 and index2) are not zero-based.\\n// You may assume that each input would have exactly one solution and you may not use the same element twice.\\n// Example:\\n\\n// Input: numbers = [2,7,11,15], target = 9\\n// Output: [1,2]\\n// Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.\\n\\nconst twoSum = (nums, target) => {\\n    let start = 0;\\n    let end = nums.length - 1;\\n    while (start < end) {\\n        let sum = nums[start] + nums[end];\\n        if(sum === target) { return [start + 1,end + 1] }\\n        else if (sum < target) {\\n            start++;\\n        } else {\\n            end--;\\n        }\\n    }\\n    return null;\\n}\\n\\nconsole.log(twoSum(null));\"","module.exports = \"// Say you have an array for which the ith element is the price of a given stock on day i.\\n\\n// Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).\\n\\n// Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).\\n\\n// Example 1:\\n\\n// Input: [7,1,5,3,6,4]\\n// Output: 7\\n// Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\\n//              Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\\n\\nvar maxProfit = price => {\\n    let res = 0;\\n    let cur = price[0];\\n    for (let i = 1; i < price.length; i++) {\\n        if (price[i] > cur) {\\n            res += price[i] - cur;\\n        }\\n        cur = price[i];\\n    }\\n    return res;\\n}\\nconsole.log(maxProfit(''));\"","module.exports = \"// Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\\n\\n// Note: For the purpose of this problem, we define empty string as valid palindrome.\\n\\n// Example 1:\\n\\n// Input: \\\"A man, a plan, a canal: Panama\\\"\\n// Output: true\\n// Example 2:\\n\\n// Input: \\\"race a car\\\"\\n// Output: false\\n\\nconst isPalindrome = str => {\\n    const tempStr = str.replace(/[^\\\\w]/g, '').toLowerCase();\\n    let left = 0;\\n    let right = tempStr.length - 1;\\n    while (left < right) {\\n        if (tempStr[left] !== tempStr[right]) return false;\\n        left++;\\n        right--;\\n    }\\n    return true;\\n}\\nconsole.log(isPalindrome(''));\"","module.exports = \"// Write a function that takes a string as input and returns the string reversed.\\n\\n// Example 1:\\n\\n// Input: \\\"hello\\\"\\n// Output: \\\"olleh\\\"\\n// Example 2:\\n\\n// Input: \\\"A man, a plan, a canal: Panama\\\"\\n// Output: \\\"amanaP :lanac a ,nalp a ,nam A\\\"\\n\\nvar reverseString = function(s) {\\n    var newString = '';\\n    for (let i = s.length - 1; i >= 0 ; i --) {\\n        newString += s[i];\\n    }\\n    return newString;\\n};\\n\\nconsole.log(reverseString('123'));\"","module.exports = \"// Given a 32-bit signed integer, reverse digits of an integer.\\n\\n// Example 1:\\n// Input: 123\\n// Output: 321\\n\\n// Example 2:\\n// Input: -123\\n// Output: -321\\n\\n// Example 3:\\n// Input: 120\\n// Output: 21\\n\\nconst reverse = number => {\\n    let y = Math.abs(number);\\n    if(y.toString(2).length > 31) return 0;\\n    let arr = y.toString().split(\\\"\\\").reverse();\\n    if(Number(arr.join(\\\"\\\")).toString(2).length > 31) return 0;\\n    let z = Number(arr.join(\\\"\\\"));\\n    return number >= 0 ? z : -z;\\n}\\n\\nconsole.log(reverse(123));\"","var map = {\n\t\"./Array/189-rotate-array\": 139,\n\t\"./Array/189-rotate-array.js\": 139,\n\t\"./Array/26-remove-duplicates-from-sorted-array\": 140,\n\t\"./Array/26-remove-duplicates-from-sorted-array.js\": 140,\n\t\"./Array/283-remove-zero\": 141,\n\t\"./Array/283-remove-zero.js\": 141,\n\t\"./Array/34-find-first-last-element-array\": 142,\n\t\"./Array/34-find-first-last-element-array.js\": 142,\n\t\"./BackTracking/78-subsets\": 143,\n\t\"./BackTracking/78-subsets.js\": 143,\n\t\"./BinarySearch/704-binarySearch\": 144,\n\t\"./BinarySearch/704-binarySearch.js\": 144,\n\t\"./BinarySearchTree/100-same-tree\": 145,\n\t\"./BinarySearchTree/100-same-tree.js\": 145,\n\t\"./BinarySearchTree/101-symmetric-tree\": 146,\n\t\"./BinarySearchTree/101-symmetric-tree.js\": 146,\n\t\"./BinarySearchTree/102-binary-tree-level-order-traversal\": 147,\n\t\"./BinarySearchTree/102-binary-tree-level-order-traversal.js\": 147,\n\t\"./BinarySearchTree/103-binary-tree-zigzag-level-order-traversal\": 148,\n\t\"./BinarySearchTree/103-binary-tree-zigzag-level-order-traversal.js\": 148,\n\t\"./BinarySearchTree/104-max-depth-of-binary-tree\": 149,\n\t\"./BinarySearchTree/104-max-depth-of-binary-tree.js\": 149,\n\t\"./BinarySearchTree/105-preorder-to-inorder-traversal\": 150,\n\t\"./BinarySearchTree/105-preorder-to-inorder-traversal.js\": 150,\n\t\"./BinarySearchTree/107-binary-tree-level-order-traversal\": 151,\n\t\"./BinarySearchTree/107-binary-tree-level-order-traversal.js\": 151,\n\t\"./BinarySearchTree/108-convert-array-bst\": 152,\n\t\"./BinarySearchTree/108-convert-array-bst.js\": 152,\n\t\"./BinarySearchTree/111-minimum-depth-of-binary-tree\": 153,\n\t\"./BinarySearchTree/111-minimum-depth-of-binary-tree.js\": 153,\n\t\"./BinarySearchTree/112-path-sum\": 154,\n\t\"./BinarySearchTree/112-path-sum.js\": 154,\n\t\"./BinarySearchTree/144-binary-tree-preorder-traversal\": 155,\n\t\"./BinarySearchTree/144-binary-tree-preorder-traversal.js\": 155,\n\t\"./BinarySearchTree/145-binary-tree-postorder-traversal\": 156,\n\t\"./BinarySearchTree/145-binary-tree-postorder-traversal.js\": 156,\n\t\"./BinarySearchTree/199-binary-tree-right-side-view\": 157,\n\t\"./BinarySearchTree/199-binary-tree-right-side-view.js\": 157,\n\t\"./BinarySearchTree/200-number-island\": 158,\n\t\"./BinarySearchTree/200-number-island.js\": 158,\n\t\"./BinarySearchTree/226-invert-binary-tree\": 159,\n\t\"./BinarySearchTree/226-invert-binary-tree.js\": 159,\n\t\"./BinarySearchTree/230-kth-element\": 160,\n\t\"./BinarySearchTree/230-kth-element.js\": 160,\n\t\"./BinarySearchTree/257-binary-tree-paths\": 161,\n\t\"./BinarySearchTree/257-binary-tree-paths.js\": 161,\n\t\"./BinarySearchTree/513-find-bottom-left-tree-value\": 162,\n\t\"./BinarySearchTree/513-find-bottom-left-tree-value.js\": 162,\n\t\"./BinarySearchTree/515-largest-value-tree-row\": 163,\n\t\"./BinarySearchTree/515-largest-value-tree-row.js\": 163,\n\t\"./BinarySearchTree/655-PrintBST\": 164,\n\t\"./BinarySearchTree/655-PrintBST.js\": 164,\n\t\"./BinarySearchTree/700-searchBST\": 165,\n\t\"./BinarySearchTree/700-searchBST.js\": 165,\n\t\"./BinarySearchTree/94-binary-tree-inorder-traversal\": 166,\n\t\"./BinarySearchTree/94-binary-tree-inorder-traversal.js\": 166,\n\t\"./BinarySearchTree/98-validate-binary-search-tree\": 167,\n\t\"./BinarySearchTree/98-validate-binary-search-tree.js\": 167,\n\t\"./BreadthFirstSearch/127-word-ladder\": 168,\n\t\"./BreadthFirstSearch/127-word-ladder.js\": 168,\n\t\"./Combination/131-palindrome-partition\": 169,\n\t\"./Combination/131-palindrome-partition.js\": 169,\n\t\"./Combination/17-phone-letter-combine\": 170,\n\t\"./Combination/17-phone-letter-combine.js\": 170,\n\t\"./Combination/39-combination-sum\": 171,\n\t\"./Combination/39-combination-sum.js\": 171,\n\t\"./Combination/40-combination-sum-ii\": 172,\n\t\"./Combination/40-combination-sum-ii.js\": 172,\n\t\"./Combination/77-combinations\": 173,\n\t\"./Combination/77-combinations.js\": 173,\n\t\"./DynamicProgramming/322-coin-change\": 174,\n\t\"./DynamicProgramming/322-coin-change.js\": 174,\n\t\"./HashTable/1-two-sum\": 175,\n\t\"./HashTable/1-two-sum.js\": 175,\n\t\"./HashTable/217-contains-duplicate\": 176,\n\t\"./HashTable/217-contains-duplicate.js\": 176,\n\t\"./HashTable/766-toeplitz-matrix\": 177,\n\t\"./HashTable/766-toeplitz-matrix.js\": 177,\n\t\"./HashTable/771-jewels-and-stones\": 178,\n\t\"./HashTable/771-jewels-and-stones.js\": 178,\n\t\"./HashTable/804-morse-code\": 179,\n\t\"./HashTable/804-morse-code.js\": 179,\n\t\"./LinkedList/116-pointers-next-right-node\": 180,\n\t\"./LinkedList/116-pointers-next-right-node.js\": 180,\n\t\"./LinkedList/141-linked-list-cycle\": 181,\n\t\"./LinkedList/141-linked-list-cycle.js\": 181,\n\t\"./LinkedList/148-sorted-linked-list\": 182,\n\t\"./LinkedList/148-sorted-linked-list.js\": 182,\n\t\"./LinkedList/19-remove-nth-node-from-end-of-list\": 183,\n\t\"./LinkedList/19-remove-nth-node-from-end-of-list.js\": 183,\n\t\"./LinkedList/2-add-two-linked\": 184,\n\t\"./LinkedList/2-add-two-linked.js\": 184,\n\t\"./LinkedList/203-remove-linked-list-elements\": 185,\n\t\"./LinkedList/203-remove-linked-list-elements.js\": 185,\n\t\"./LinkedList/206-reverse-linked-list\": 186,\n\t\"./LinkedList/206-reverse-linked-list.js\": 186,\n\t\"./LinkedList/21-merge-two-sorted-lists\": 187,\n\t\"./LinkedList/21-merge-two-sorted-lists.js\": 187,\n\t\"./LinkedList/234-palindrome-linked-list\": 188,\n\t\"./LinkedList/234-palindrome-linked-list.js\": 188,\n\t\"./LinkedList/237-delete-linked-list\": 189,\n\t\"./LinkedList/237-delete-linked-list.js\": 189,\n\t\"./LinkedList/83-remove-duplicates-from-sorted-list\": 190,\n\t\"./LinkedList/83-remove-duplicates-from-sorted-list.js\": 190,\n\t\"./LinkedList/876-middle-of-the-linked-list\": 191,\n\t\"./LinkedList/876-middle-of-the-linked-list.js\": 191,\n\t\"./Permutations/46-permutations\": 192,\n\t\"./Permutations/46-permutations.js\": 192,\n\t\"./Permutations/93-restore-ip-addresses\": 193,\n\t\"./Permutations/93-restore-ip-addresses.js\": 193,\n\t\"./TwoPointer/167-two-sum-II\": 194,\n\t\"./TwoPointer/167-two-sum-II.js\": 194,\n\t\"./_misc/122-best-time-to-buy-and-sell-stock\": 195,\n\t\"./_misc/122-best-time-to-buy-and-sell-stock.js\": 195,\n\t\"./_misc/125-valid-palindrome\": 196,\n\t\"./_misc/125-valid-palindrome.js\": 196,\n\t\"./_misc/344-reverse-string\": 197,\n\t\"./_misc/344-reverse-string.js\": 197,\n\t\"./_misc/7-revese-integer\": 198,\n\t\"./_misc/7-revese-integer.js\": 198\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 393;","\nconst data = {\n    name: 'LeetCode - Algorithm',\n    toggled: true,\n    children: [{\"name\":\"Array\",\"type\":\"folder\",\"children\":[{\"type\":\"file\",\"name\":\"189-rotate-array.js\"},{\"type\":\"file\",\"name\":\"26-remove-duplicates-from-sorted-array.js\"},{\"type\":\"file\",\"name\":\"283-remove-zero.js\"},{\"type\":\"file\",\"name\":\"34-find-first-last-element-array.js\"}]},{\"name\":\"BackTracking\",\"type\":\"folder\",\"children\":[{\"type\":\"file\",\"name\":\"78-subsets.js\"}]},{\"name\":\"BinarySearch\",\"type\":\"folder\",\"children\":[{\"type\":\"file\",\"name\":\"704-binarySearch.js\"}]},{\"name\":\"BreadthFirstSearch\",\"type\":\"folder\",\"children\":[{\"type\":\"file\",\"name\":\"127-word-ladder.js\"}]},{\"name\":\"DynamicProgramming\",\"type\":\"folder\",\"children\":[{\"type\":\"file\",\"name\":\"322-coin-change.js\"}]},{\"name\":\"Combination\",\"type\":\"folder\",\"children\":[{\"type\":\"file\",\"name\":\"131-palindrome-partition.js\"},{\"type\":\"file\",\"name\":\"17-phone-letter-combine.js\"},{\"type\":\"file\",\"name\":\"39-combination-sum.js\"},{\"type\":\"file\",\"name\":\"40-combination-sum-ii.js\"},{\"type\":\"file\",\"name\":\"77-combinations.js\"}]},{\"name\":\"BinarySearchTree\",\"type\":\"folder\",\"children\":[{\"type\":\"file\",\"name\":\"100-same-tree.js\"},{\"type\":\"file\",\"name\":\"101-symmetric-tree.js\"},{\"type\":\"file\",\"name\":\"102-binary-tree-level-order-traversal.js\"},{\"type\":\"file\",\"name\":\"103-binary-tree-zigzag-level-order-traversal.js\"},{\"type\":\"file\",\"name\":\"104-max-depth-of-binary-tree.js\"},{\"type\":\"file\",\"name\":\"105-preorder-to-inorder-traversal.js\"},{\"type\":\"file\",\"name\":\"107-binary-tree-level-order-traversal.js\"},{\"type\":\"file\",\"name\":\"108-convert-array-bst.js\"},{\"type\":\"file\",\"name\":\"111-minimum-depth-of-binary-tree.js\"},{\"type\":\"file\",\"name\":\"112-path-sum.js\"},{\"type\":\"file\",\"name\":\"144-binary-tree-preorder-traversal.js\"},{\"type\":\"file\",\"name\":\"145-binary-tree-postorder-traversal.js\"},{\"type\":\"file\",\"name\":\"199-binary-tree-right-side-view.js\"},{\"type\":\"file\",\"name\":\"200-number-island.js\"},{\"type\":\"file\",\"name\":\"226-invert-binary-tree.js\"},{\"type\":\"file\",\"name\":\"230-kth-element.js\"},{\"type\":\"file\",\"name\":\"257-binary-tree-paths.js\"},{\"type\":\"file\",\"name\":\"513-find-bottom-left-tree-value.js\"},{\"type\":\"file\",\"name\":\"515-largest-value-tree-row.js\"},{\"type\":\"file\",\"name\":\"655-PrintBST.js\"},{\"type\":\"file\",\"name\":\"700-searchBST.js\"},{\"type\":\"file\",\"name\":\"94-binary-tree-inorder-traversal.js\"},{\"type\":\"file\",\"name\":\"98-validate-binary-search-tree.js\"}]},{\"name\":\"LinkedList\",\"type\":\"folder\",\"children\":[{\"type\":\"file\",\"name\":\"116-pointers-next-right-node.js\"},{\"type\":\"file\",\"name\":\"141-linked-list-cycle.js\"},{\"type\":\"file\",\"name\":\"148-sorted-linked-list.js\"},{\"type\":\"file\",\"name\":\"19-remove-nth-node-from-end-of-list.js\"},{\"type\":\"file\",\"name\":\"2-add-two-linked.js\"},{\"type\":\"file\",\"name\":\"203-remove-linked-list-elements.js\"},{\"type\":\"file\",\"name\":\"206-reverse-linked-list.js\"},{\"type\":\"file\",\"name\":\"21-merge-two-sorted-lists.js\"},{\"type\":\"file\",\"name\":\"234-palindrome-linked-list.js\"},{\"type\":\"file\",\"name\":\"237-delete-linked-list.js\"},{\"type\":\"file\",\"name\":\"83-remove-duplicates-from-sorted-list.js\"},{\"type\":\"file\",\"name\":\"876-middle-of-the-linked-list.js\"}]},{\"name\":\"HashTable\",\"type\":\"folder\",\"children\":[{\"type\":\"file\",\"name\":\"1-two-sum.js\"},{\"type\":\"file\",\"name\":\"217-contains-duplicate.js\"},{\"type\":\"file\",\"name\":\"766-toeplitz-matrix.js\"},{\"type\":\"file\",\"name\":\"771-jewels-and-stones.js\"},{\"type\":\"file\",\"name\":\"804-morse-code.js\"}]},{\"name\":\"Permutations\",\"type\":\"folder\",\"children\":[{\"type\":\"file\",\"name\":\"46-permutations.js\"},{\"type\":\"file\",\"name\":\"93-restore-ip-addresses.js\"}]},{\"name\":\"TwoPointer\",\"type\":\"folder\",\"children\":[{\"type\":\"file\",\"name\":\"167-two-sum-II.js\"}]},{\"name\":\"_misc\",\"type\":\"folder\",\"children\":[{\"type\":\"file\",\"name\":\"122-best-time-to-buy-and-sell-stock.js\"},{\"type\":\"file\",\"name\":\"125-valid-palindrome.js\"},{\"type\":\"file\",\"name\":\"344-reverse-string.js\"},{\"type\":\"file\",\"name\":\"7-revese-integer.js\"}]}]\n};\n\nlet map = {};\nfor (let i = 0; i < data.children.length; i++) {\n    for (let j = 0; j < data.children[i].children.length; j++ ) {\n        map[data.children[i].children[j].name] = \n        require(`!raw-loader!./leetcode/${data.children[i].name}/${data.children[i].children[j].name}`);\n    }\n}\n\nconsole.log(map);\nexport { map };\nexport default data;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './styles/index.css'\n\nconst Header = () => (\n    <header id=\"header\">\n      <div className='avatar'>TC</div>\n      <nav className=\"links\">\n        <ul>\n          <li><Link to='/'>Home</Link></li>\n          <li><Link to='/resume'>resume</Link></li>\n          <li><Link to='/leetcode'>leetcode</Link></li>\n        </ul>\n      </nav>\n    </header>\n)\n\nexport default Header\n","import React from 'react';\n\n// The Header creates links that can be used to navigate\n// between routes.\nconst Home = () => (\n<div className=\"experience-group\">\n   <div className=\"group-title\">\n      <div className=\"group-title-icon profile\"></div>\n      Tony Chen - Software Engineer\n   </div>\n   <div className=\"experience-item\">\n      <div className=\"item-description\">\n         <p>Dear Sir or Madam,</p>\n         <p>\n            If your company can benefit from the contributions of a resourceful and knowledgeable technical professional who seeks to develop solutions with the end user in mind, then i am the candidate that you seek.\n         </p>\n         <p>\n            Throughout my career, I have become proficient in numerous platforms, web technologies, programming languages, and application development tools, I constantly strive to find the best solutions, and work hard to ensure that each new feature implemented provides technological advancements for system users. I have played instrumental roles in various project and been involved in the project lifecycle development.\n         </p>\n         <p>\n            I am a quick learner with the proven ability to clearly understand problems and find positive solutions through critical thinking, diligence and excellent communication skills. with a solid reputation as dynamic problem solver and out of the box thinker, i consistently deliver solutions that exceed user expectation. I am confident I can do the same of you.\n         </p>\n         <p>\n            I am confident in my ability to meet and exceed your expectation for Web Application engineer, and i believe my background provides the skills you require for this position, and i would appreciate the opportunity to further discuss my credentials ability with you during the personal interview.\n         </p>\n         <p>\n            Thanks you for your time Interest and consideration.\n         </p>\n         <p>Sincerely,</p>\n         <p><b>Tony Chen</b></p>\n      </div>\n   </div>\n</div>\n);\n\nexport default Home;\n","import React from 'react';\nimport './styles/index.css';\nclass Resume extends React.Component {\n  \n  constructor() {\n      super();\n      this.state = {};\n  }\n  render() {\n    return (\n      <div>\n         <div className=\"main\">\n              <div className=\"personal-info-block\">\n                <div className=\"text-block\">\n                    <div className=\"name\">Tony Chen</div>\n                    <div className=\"current-position setting--primary-text\">Software Engineer</div>\n                    <div className=\"contacts\">\n                      <div className=\"city\">California, 95131, USA</div>\n                    </div>\n                </div>\n              </div>\n              <div className=\"experience-group\">\n                <div className=\"group-title\">\n                    <div className=\"group-title-icon profile\"></div>\n                    Superior Applications Development\n                </div>\n                <div className=\"experience-item\">\n                    <div className=\"item-description\">\n                      <p>Highly Skilled in designing, coding, and testing innovative and effective software, User interface(UI), and e-commerce solutions. Strong project leader accomplished in directing cradle-to-grave software developer life cycle( SDLC). Proficient in industry dominant languageds, methodologies, standards, and the best practices, Superior planner and proritlier with a track record for on-time project delivery.</p>\n                      <p>Seeking a software development position that demands utilization of my knowledge and skills. I have years experience in both development and research positions. I create software with user in mind. I understand the importance of maintainable source code &nbsp;and I also constantly learning new technologies.</p>\n                    </div>\n                </div>\n              </div>\n              <div className=\"experience-group\">\n                <div className=\"group-title\">\n                    <div className=\"group-title-icon work\"></div>\n                    Career Success\n                </div>\n                <div className=\"experience-item\">\n                    <div className=\"item-title\">Software Engineer at  8x8 Inc., San Jose</div>\n                    <div className=\"item-caption setting--primary-text\">October 2015&nbsp;&nbsp;–&nbsp;&nbsp;October 2018</div>\n                    <div className=\"item-description\">\n                      <ul>\n                          <li>Leveraged ReactJS and Electron to build presentation layer for cross-platform telephony / chat desktop applications</li>\n                          <li>Experienced in React JS and working with Redux architecture.&nbsp;</li>\n                          <li>Experienced in developing React components. Used Axios with ReactJS for making AJAX Calls. Worked on Webpack for build and webpack-dev-server a server.&nbsp;</li>\n                          <li>Design reusable user interface components in ReactJS and Javascript ES6, Managed application state using Redux</li>\n                          <li>Write unit test in Jest and Enzyme to save development efforts</li>\n                          <li>Contribute in continuous integration and continuous deployment making pull request using GitLab and Jenkins</li>\n                          <li>Working in Agile Methodology and team Scrum, and work with story task</li>\n                          <li>Ability and experience to work in a critical, dynamic and challenging environment.</li>\n                          <li>Excellent understanding of system design and analysis concepts.</li>\n                          <li>Document work using self documenting technique.</li>\n                      </ul>\n                    </div>\n                </div>\n                <div className=\"experience-item\">\n                    <div className=\"item-title\">Software Engineer at  Mobile Programming LLC.</div>\n                    <div className=\"item-caption setting--primary-text\">October 2005&nbsp;&nbsp;–&nbsp;&nbsp;October 2015</div>\n                    <div className=\"item-description\">\n                      <p><strong>A-G Software &amp; Technology, Inc. Ontario, California &nbsp;</strong></p>\n                      <p><strong>ASP.NET C# / MVC / IOC/ JQuery / KnockoutJS</strong></p>\n                      <ul>\n                          <li>Resharper, Ninject, Nunit, LINQ, and Design Patterns.</li>\n                          <li>Using best practices, integrated SAP BusinessObjects (.NET 3.5) with ASP.NET MVC 3 (.NET 4.0).</li>\n                          <li>Using Dependency Injection for software design pattern.</li>\n                          <li>Create user screens from design comps following project style guidelines.</li>\n                          <li>Create and unit test intricate client side interactions with jQuery and KnockoutJS(MVVM)/DurandalJS(SPA).</li>\n                          <li>Create Mobile Site , using AngularJS (SPA )</li>\n                          <li>Using Bootstrap do developer a responsive mobile website.</li>\n                          <li>Develop complex MVC Controller, ViewModels and Helper methods linked to backend database.</li>\n                          <li>Developed deep understanding of NHibernate configuration and usage.</li>\n                          <li>Utilized Cassette for combining and optimizing CSS and JavaScript files.</li>\n                          <li>Attend design meetings and provide feedback based on professional experience.</li>\n                          <li>Provided mentorship, training and resources to team members.</li>\n                      </ul>\n                      <p><strong>Prediction Science (ASP.NET C# ) Irvine, California&nbsp;</strong></p>\n                      <ul>\n                          <li>Developing code using ASP.net and MS-SQL.</li>\n                          <li>Working with XML, SOAP, and Web Services&nbsp;</li>\n                          <li>Proficient in JavaScript/AJAX&nbsp;</li>\n                          <li>Create system design documents and devise an implementation strategy for the projects.</li>\n                          <li>Structure and view data online via the web.&nbsp;</li>\n                          <li>Developed and tested projects according to specifications.</li>\n                      </ul>\n                      <p><strong>AVM LP (ASP.NET C# / AJAX) Boca Raton, Florida</strong></p>\n                      <ul>\n                          <li>Building, deploying, and managing enterprise Web Portal Content Management.</li>\n                          <li>Create Custom Chart – Pie Chart, Line Chart, and Bar Chart. &nbsp;</li>\n                          <li>Testify the functionality of the Web Product and helped overcome problems regarding UI</li>\n                          <li>Web applications written primarily in ASP.NET C# 3.5 / 4.0</li>\n                          <li>Applied knowledge of prototype process design and usability process test.</li>\n                          <li>Recognize the business objectives and constraints and plan accordingly</li>\n                          <li>Participate in all phases of projects, from requirements gathering &amp; estimating to deployment</li>\n                          <li>Experienced the development and implementation of user interface for commercial web-based</li>\n                      </ul>\n                      <p><strong>Four Seasons Sunrooms (className ASP / ASP.NET / AJAX) Long Island, NY&nbsp;</strong></p>\n                      <ul>\n                          <li>User Interface presentation using Photoshop and cascading style sheet <strong>CSS</strong>.&nbsp;</li>\n                          <li>Designed database schema</li>\n                          <li>Intranet and Website Maintenance and Updates&nbsp;</li>\n                          <li>Translating business requirements into technical architecture and specification&nbsp;</li>\n                          <li>Interacting with a team of developers&nbsp;</li>\n                          <li>Documenting development processes, methodology and standards&nbsp;</li>\n                          <li>Communicating with clients and vendors</li>\n                      </ul>\n                    </div>\n                </div>\n              </div>\n              <div className=\"experience-group\">\n                <div className=\"group-title\">\n                    <div className=\"group-title-icon education\"></div>\n                    Education\n                </div>\n                <div className=\"experience-item\">\n                    <div className=\"item-title\">Bachelor of Art:  Computer Science, University of New York, New York</div>\n                    <div className=\"item-caption setting--primary-text\">October 1998&nbsp;&nbsp;–&nbsp;&nbsp;October 2002</div>\n                    <div className=\"item-description\">\n                      <p></p>\n                    </div>\n                </div>\n              </div>\n          </div>\n          <div className=\"aside\">\n              <div className=\"aside-group details\">\n                <div className=\"title\">Details</div>\n                <div className=\"section\">\n                    <div className=\"text\">2014 Nunes Dr, California, 95131, USA</div>\n                    <div className=\"text\">561-901-5698</div>\n                    <div className=\"text setting--primary-text\">tchen427@gmail.com</div>\n                </div>\n                <div className=\"section\">\n                    <div className=\"label\">Nationality</div>\n                    <div className=\"text\">Chinese, Asian</div>\n                </div>\n              </div>\n              <div className=\"aside-group\">\n                <div className=\"title with-icon\">\n                    <div className=\"title-icon skills\"></div>\n                    Skills\n                </div>\n                <div className=\"section\">\n                    <div className=\"text\">ReactJS / Redux</div>\n                    <div className=\"progress\">\n                      <div className=\"progress-inner setting--primary-background\"></div>\n                    </div>\n                    <div className=\"text\">Javascript / ES5 / ES6</div>\n                    <div className=\"progress\">\n                      <div className=\"progress-inner setting--primary-background\"></div>\n                    </div>\n                    <div className=\"text\">CSS / Sass / Stylus</div>\n                    <div className=\"progress\">\n                      <div className=\"progress-inner setting--primary-background\"></div>\n                    </div>\n                    <div className=\"text\">NodeJS / npm / </div>\n                    <div className=\"progress\">\n                      <div className=\"progress-inner setting--primary-background\"></div>\n                    </div>\n                    <div className=\"text\">Webpack / Gulp / Grant</div>\n                    <div className=\"progress\">\n                      <div className=\"progress-inner setting--primary-background\"></div>\n                    </div>\n                    <div className=\"text\">Gitlab/ Github</div>\n                    <div className=\"progress\">\n                      <div className=\"progress-inner setting--primary-background\"></div>\n                    </div>\n                </div>\n              </div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default Resume;\n","// Helper functions for filtering\nexport const defaultMatcher = (filterText, node) => {\n    // return node.name.toLowerCase().indexOf(filterText.toLowerCase()) !== -1;\n    return node.name.indexOf(filterText) !== -1;\n};\n\nexport const findNode = (node, filter, matcher) => {\n    return matcher(filter, node) || // i match\n        (node.children && // or i have decendents and one of them match\n        node.children.length &&\n        !!node.children.find(child => findNode(child, filter, matcher)));\n};\n\nexport const filterTree = (node, filter, matcher = defaultMatcher) => {\n    // If im an exact match then all my children get to stay\n    if(matcher(filter, node) || !node.children){ return node; }\n    // If not then only keep the ones that match or have matching descendants\n    const filtered = node.children\n      .filter(child => findNode(child, filter, matcher))\n      .map(child => filterTree(child, filter, matcher));\n    return Object.assign({}, node, { children: filtered });\n};\n\nexport const expandFilteredNodes = (node, filter, matcher = defaultMatcher) => {\n    let children = node.children;\n    if(!children || children.length === 0){\n      return Object.assign({}, node, { toggled: false });\n    }\n    const childrenWithMatches = node.children.filter(child => findNode(child, filter, matcher));\n    const shouldExpand = childrenWithMatches.length > 0;\n    // If im going to expand, go through all the matches and see if thier children need to expand\n    if(shouldExpand){\n      children = childrenWithMatches.map(child => {\n          return expandFilteredNodes(child, filter, matcher);\n      });\n    }\n    return Object.assign({}, node, {\n      children: children,\n      toggled: shouldExpand\n    });\n};","export default {\n    tree: {\n        base: {\n            listStyle: 'none',\n            backgroundColor: '#fff',\n            margin: 0,\n            padding: 0,\n            color: '#343d46',\n            fontFamily: 'lucida grande ,tahoma,verdana,arial,sans-serif',\n            fontSize: '14px'\n        },\n        node: {\n            base: {\n                position: 'relative'\n            },\n            link: {\n                cursor: 'pointer',\n                position: 'relative',\n                padding: '0px 5px',\n                display: 'block'\n            },\n            activeLink: {\n                background: '#31363F'\n            },\n            toggle: {\n                base: {\n                    position: 'relative',\n                    display: 'inline-block',\n                    verticalAlign: 'top',\n                    marginLeft: '-5px',\n                    height: '24px',\n                    width: '24px'\n                },\n                wrapper: {\n                    position: 'absolute',\n                    top: '50%',\n                    left: '50%',\n                    margin: '-7px 0 0 -7px',\n                    height: '14px'\n                },\n                height: 14,\n                width: 14,\n                arrow: {\n                    fill: '#343d46',\n                    strokeWidth: 0\n                }\n            },\n            header: {\n                base: {\n                    display: 'inline-block',\n                    verticalAlign: 'top',\n                    color: '#343d46'\n                },\n                connector: {\n                    width: '2px',\n                    height: '12px',\n                    borderLeft: 'solid 2px black',\n                    borderBottom: 'solid 2px black',\n                    position: 'absolute',\n                    top: '0px',\n                    left: '-21px'\n                },\n                title: {\n                    lineHeight: '24px',\n                    verticalAlign: 'middle'\n                }\n            },\n            subtree: {\n                listStyle: 'none',\n                paddingLeft: '19px'\n            },\n            loading: {\n                color: '#E2C089'\n            }\n        }\n    }\n};","\nimport React from 'react';\nimport {Treebeard} from 'react-treebeard';\n\nimport Prism from 'prismjs';\nimport './styles/prismjs.css';\nimport './styles/index.css';\n\nimport data, { map } from '../../data';\nimport * as filters from './filter';\nimport treeStyle from './styles/treeTheme';\n\nclass LeetCode extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = { data, content: '' };\n        this.onToggle = this.onToggle.bind(this);\n    }\n    componentDidMount() {\n        this.setState({ content: map['1-two-sum.js'] });\n        Prism.highlightAll();\n    }\n    componentDidUpdate() {\n        Prism.highlightAll();\n    }\n    onToggle(node, toggled){\n        if(this.state.cursor){\n            // this.state.cursor.active = false;\n            this.setState({ cursor: { active: false }});\n        }\n        node.active = true;\n        if(node.children){ node.toggled = toggled; }\n        this.setState({ cursor: node });\n        if (node.type === 'file') {\n            this.setState({ content: map[node.name] });\n        }\n    }\n    onFilterMouseUp(e) {\n        const filter = e.target.value.trim();\n        if (!filter) {\n            return this.setState({data});\n        }\n        var filtered = filters.filterTree(data, filter);\n        filtered = filters.expandFilteredNodes(filtered, filter);\n        this.setState({data: filtered});\n    }\n    render(){\n        return (\n            <div className=\"section group\">\n                <div className=\"col span_1_of_2\">\n                    <br/>\n                    <input className=\"form-control\"\n                                onKeyUp={this.onFilterMouseUp.bind(this)}\n                                placeholder=\"Search the topic...\"\n                                type=\"text\"/>\n                    <br/><br/>\n                    <Treebeard\n                        style={treeStyle}\n                        data={this.state.data}\n                        onToggle={this.onToggle}\n                    />\n                </div>\n                <div className=\"col span_2_of_2\">\n                    {\n                        this.state.content && \n                        (<pre>\n                            <code className=\"language-javascript\">\n                                {this.state.content}\n                            </code>\n                        </pre>)\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default LeetCode;\n","import React, { Component } from 'react';\nimport { Switch, Route} from 'react-router-dom'\nimport Header from './components/header';\nimport Home from './components/home';\nimport Resume from './components/resume';\nimport LeetCode from './components/leetcode';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"body--share\">\n        <div className=\"headerTop\"/>\n        <Header />\n        <div className=\"preview-box\">\n          <div className=\"container\">\n            <Switch>\n              <Route exact path='/' component={Home}/>\n              <Route path='/resume' component={Resume}/>\n              <Route path='/leetcode' component={LeetCode}/>\n            </Switch>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter} from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}